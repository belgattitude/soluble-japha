{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PHP/Java integration where PHP meets Java again \u00b6 Introduction \u00b6 In short soluble-japha allows to write Java code in PHP and interact with the JVM ecosystem. As meaningless examples: <?php // Some standard JVM classes $hashMap = $ba -> java ( 'java.util.HashMap' , [ 'message' => 'Hello world' , 'value' => $ba -> java ( 'java.math.BigInteger' , PHP_INT_MAX ) ]); $hashMap -> put ( 'message' , '\u4f60\u597d\uff0c\u4e16\u754c' ); echo $hashMap -> get ( 'message' ); <?php // An imaginary java library class (i.e. NLP, Android, Jasper, Tensorflow, // enterprise stuff, esoteric java lib/driver or your own Java class...) try { $javaLib = $ba -> java ( 'an.imaginary.JavaLibraryClass' , 'param1' , 'param2' ); $results = $javaLib -> aMethodOnJavaLibExecutedOnTheJVM ( // Method parameters $hashMap -> get ( 'message' ), $ba -> java ( 'java.io.BufferedReader' , $ba -> java ( 'java.io.FileReader' , __FILE__ ) ), $ba -> javaClass ( 'java.util.TimeZone' ) -> SHORT ); foreach ( $results as $key => $values ) { echo \" $key : \" . $values [ 0 ] . PHP_EOL ; } } catch ( Exception\\ClassNotFoundException $e ) { echo $e -> getMessage (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage () . ' [' . $e -> getJavaClassName () . ']' ; echo $e -> getStackTrace (); } Use cases \u00b6 Expand the PHP horizons to the Java ecosystem whenever you want to quickly play with some compelling libraries ( Jasperreports , CoreNLP , FlyingSaucer , Jsoup ...) benefit from JVM performances ( Deeplearning4J ...) or wrappers ( TensorFlowApi ...) when a pure-PHP alternative does not exists (Android, driver, closed api, enterprise...) or simply for the fun of it. Features \u00b6 soluble-japha provides a PHP client to interact with the Java Virtual Machine. Write Java code from PHP (in a similar way from equivalent java code) . Keep programmatic code control from the PHP side ( function oriented vs REST ) . Java execution on the JVM ensuring compatibility and efficiency (proxied objects) . No need to write a service layer prior to usage ( the Java object is the contract ). Network based communication between runtimes ( no JVM startup effort ). Solid foundation to create, develop or publish PHP wrappers over java libs. How it works \u00b6 sequenceDiagram Note over SolubleJapha: Serialize call SolubleJapha->>+PHPJavaBridgeServer: XML Payload Note over PHPJavaBridgeServer, JVM: Deserialize and init context PHPJavaBridgeServer->JVM: Execute <br />the call on the JVM PHPJavaBridgeServer-->>-SolubleJapha: XML Payload Note over SolubleJapha: Deserialize response Considerations \u00b6 Summary In short, the bridge shines whenever you need to use directly a Java library within a reasonable number of method calls. Otherwise implement REST or RPC approaches for first-class system integrations. See the how it works and performance sections to learn more. The soluble-japha bridge can be seen as a function oriented solution in comparison to resource oriented ones (i.e. REST,...) . From REST or even RPC-based solutions (XMLRPC, JsonRPC or gRPC ) , the bridge skips the need to write a service layer on the Java side and allows a more programmatic approach to PHP developers. Depending on usage, the benefits of freedom offered by the bridge can become a limitation in term of performance. Keep in mind that the bridge is sensitive to the number of objects and method calls (named roundtrips ) and if few hundreds of methods calls are often insignificant (a roundtrip is generally less than 0.1ms, see benchmarks ) going further its target scenarios can be disappointing. In those case, traditional approaches like REST should be considered and applied instead. That said, the bridge is a good, reliable and sometimes preferable alternative over REST for scenarios where a reasonable number of methods calls is intended or whenever you want to keep control of the code on the PHP side. Tip Be sure to read the optimizations techniques while developing with the bridge. Support \u00b6 Please fill any issues on the offical tracker . If you like to contribute, see the contribution guidelines . All P/R are warmly welcomed. License \u00b6 Published under the MIT License . Copyright \u00a9 2013-2020 Vanvelthem S\u00e9bastien","title":"Introduction"},{"location":"#phpjava-integration-where-php-meets-java-again","text":"","title":"PHP/Java integration where PHP meets Java again"},{"location":"#introduction","text":"In short soluble-japha allows to write Java code in PHP and interact with the JVM ecosystem. As meaningless examples: <?php // Some standard JVM classes $hashMap = $ba -> java ( 'java.util.HashMap' , [ 'message' => 'Hello world' , 'value' => $ba -> java ( 'java.math.BigInteger' , PHP_INT_MAX ) ]); $hashMap -> put ( 'message' , '\u4f60\u597d\uff0c\u4e16\u754c' ); echo $hashMap -> get ( 'message' ); <?php // An imaginary java library class (i.e. NLP, Android, Jasper, Tensorflow, // enterprise stuff, esoteric java lib/driver or your own Java class...) try { $javaLib = $ba -> java ( 'an.imaginary.JavaLibraryClass' , 'param1' , 'param2' ); $results = $javaLib -> aMethodOnJavaLibExecutedOnTheJVM ( // Method parameters $hashMap -> get ( 'message' ), $ba -> java ( 'java.io.BufferedReader' , $ba -> java ( 'java.io.FileReader' , __FILE__ ) ), $ba -> javaClass ( 'java.util.TimeZone' ) -> SHORT ); foreach ( $results as $key => $values ) { echo \" $key : \" . $values [ 0 ] . PHP_EOL ; } } catch ( Exception\\ClassNotFoundException $e ) { echo $e -> getMessage (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage () . ' [' . $e -> getJavaClassName () . ']' ; echo $e -> getStackTrace (); }","title":"Introduction"},{"location":"#use-cases","text":"Expand the PHP horizons to the Java ecosystem whenever you want to quickly play with some compelling libraries ( Jasperreports , CoreNLP , FlyingSaucer , Jsoup ...) benefit from JVM performances ( Deeplearning4J ...) or wrappers ( TensorFlowApi ...) when a pure-PHP alternative does not exists (Android, driver, closed api, enterprise...) or simply for the fun of it.","title":"Use cases"},{"location":"#features","text":"soluble-japha provides a PHP client to interact with the Java Virtual Machine. Write Java code from PHP (in a similar way from equivalent java code) . Keep programmatic code control from the PHP side ( function oriented vs REST ) . Java execution on the JVM ensuring compatibility and efficiency (proxied objects) . No need to write a service layer prior to usage ( the Java object is the contract ). Network based communication between runtimes ( no JVM startup effort ). Solid foundation to create, develop or publish PHP wrappers over java libs.","title":"Features"},{"location":"#how-it-works","text":"sequenceDiagram Note over SolubleJapha: Serialize call SolubleJapha->>+PHPJavaBridgeServer: XML Payload Note over PHPJavaBridgeServer, JVM: Deserialize and init context PHPJavaBridgeServer->JVM: Execute <br />the call on the JVM PHPJavaBridgeServer-->>-SolubleJapha: XML Payload Note over SolubleJapha: Deserialize response","title":"How it works"},{"location":"#considerations","text":"Summary In short, the bridge shines whenever you need to use directly a Java library within a reasonable number of method calls. Otherwise implement REST or RPC approaches for first-class system integrations. See the how it works and performance sections to learn more. The soluble-japha bridge can be seen as a function oriented solution in comparison to resource oriented ones (i.e. REST,...) . From REST or even RPC-based solutions (XMLRPC, JsonRPC or gRPC ) , the bridge skips the need to write a service layer on the Java side and allows a more programmatic approach to PHP developers. Depending on usage, the benefits of freedom offered by the bridge can become a limitation in term of performance. Keep in mind that the bridge is sensitive to the number of objects and method calls (named roundtrips ) and if few hundreds of methods calls are often insignificant (a roundtrip is generally less than 0.1ms, see benchmarks ) going further its target scenarios can be disappointing. In those case, traditional approaches like REST should be considered and applied instead. That said, the bridge is a good, reliable and sometimes preferable alternative over REST for scenarios where a reasonable number of methods calls is intended or whenever you want to keep control of the code on the PHP side. Tip Be sure to read the optimizations techniques while developing with the bridge.","title":"Considerations"},{"location":"#support","text":"Please fill any issues on the offical tracker . If you like to contribute, see the contribution guidelines . All P/R are warmly welcomed.","title":"Support"},{"location":"#license","text":"Published under the MIT License . Copyright \u00a9 2013-2020 Vanvelthem S\u00e9bastien","title":"License"},{"location":"bridge_benchmarks/","text":"Benchmarks \u00b6 Warning The following benchmarks does not intend to prove anything but might help understand the possible overheads when using the bridge. They were designed to illustrate the cost of creating objects and calling methods (roundtrips). Be sure to have read the how it works before. Simple benchmark \u00b6 Machine: Laptop i7-6700HQ 2.60GHz, Tomcat8, japha 1.2.0, OracleJDK8, pjb7.0.0 and php7.0-fpm on ubuntu xenial. Test script: simple_benchmark.php . Connection time: $ba = new BridgeAdapter([]) varies between around 2ms and 7ms Benchmark name x1 x100 x1000 x10000 Average Memory New java( java.lang.String , \"One\") 0.14ms 4.09ms 34.17ms 282.30ms 0.03ms 12.37Kb New java( java.math.BigInteger , 1) 0.05ms 3.28ms 32.51ms 308.27ms 0.03ms 0.37Kb javaClass( java.sql.DriverManager ) 0.09ms 0.02ms 0.14ms 1.69ms 0.00ms 3.12Kb Method call java.lang.String->length() 0.05ms 2.14ms 21.60ms 226.35ms 0.02ms 0.34Kb Method call String->concat(\"hello\") 0.08ms 2.59ms 27.30ms 287.79ms 0.03ms 2.09Kb $a = ...String->concat('hello') . ' world' 0.09ms 5.81ms 54.64ms 532.68ms 0.05ms 0.42Kb New java( java.util.HashMap , $arr) 0.16ms 3.74ms 33.78ms 351.76ms 0.04ms 67.05Kb Method call HashMap->get('arrKey') 0.04ms 2.71ms 23.37ms 267.88ms 0.03ms 0.39Kb Call (string) HashMap->get('arrKey')[0] 0.08ms 5.98ms 56.99ms 566.69ms 0.06ms 0.37Kb Iterate HashMap->get('arrKey')[0]` 0.23ms 13.40ms 133.93ms 1,252.59ms 0.13ms 2.52Kb GetValues on HashMap 0.05ms 3.67ms 36.22ms 368.43ms 0.04ms 1.27Kb New java(HashMap(array_fill(0, 100, true))) 0.20ms 12.04ms 122.62ms 1,202.73ms 0.12ms 0.63Kb Pure PHP: call PHP strlen() method 0.00ms 0.00ms 0.01ms 0.07ms 0.00ms 0.37Kb Pure PHP: concat '$string . \"hello\"' 0.00ms 0.00ms 0.04ms 0.31ms 0.00ms 120.37Kb Note Memory and average time are computed on the 11101 iterations (x1, x100...). You'll realize that average time is always lower than x1 (or x10). There's some optimzations happening on subsequent calls that make very difficult to give sense to an average here. The best is to always refer to x1 for worst-case scenario timing. Memory does not include the JVM side, that explains differences from pure php tests and Java one. The figures above will vary between systems, but intuitively you might get a glimpse about how the bridge is sensitive to the number of object creations and method calls (roundtrips): (connection time) + (number of created objects) + (number of methods) + (eventual result parsing). Imagine a very simple case with 100 objects instantiations and 100 method calls (from the PHP side): 4ms (connection) + 4.09ms (100 new strings) + 5.81ms (100 concat methods) = \u00b1 13ms minimal overhead (looks fine) . Imagine a bad scenario with 1.000 new objects and 10.000 method calls: 4ms (connection) + 34.1ms (1000 new objects) + 532.68ms (10000 concat methods) = \u00b1 570ms overhead (looks too much) . The second example should be avoided if performance matters, but the first one looks not only viable but a (micro-)service would probably not do better (parsing the result might give differences - a json_decode() vs parsing bridge response... But eventually you can also get the json from the bridge as well). As an example, generating a report with Jasper will not even require more than 10 objects and at max 100 method calls. The overhead here is clearly insignificant.","title":"Benchmarks"},{"location":"bridge_benchmarks/#benchmarks","text":"Warning The following benchmarks does not intend to prove anything but might help understand the possible overheads when using the bridge. They were designed to illustrate the cost of creating objects and calling methods (roundtrips). Be sure to have read the how it works before.","title":"Benchmarks"},{"location":"bridge_benchmarks/#simple-benchmark","text":"Machine: Laptop i7-6700HQ 2.60GHz, Tomcat8, japha 1.2.0, OracleJDK8, pjb7.0.0 and php7.0-fpm on ubuntu xenial. Test script: simple_benchmark.php . Connection time: $ba = new BridgeAdapter([]) varies between around 2ms and 7ms Benchmark name x1 x100 x1000 x10000 Average Memory New java( java.lang.String , \"One\") 0.14ms 4.09ms 34.17ms 282.30ms 0.03ms 12.37Kb New java( java.math.BigInteger , 1) 0.05ms 3.28ms 32.51ms 308.27ms 0.03ms 0.37Kb javaClass( java.sql.DriverManager ) 0.09ms 0.02ms 0.14ms 1.69ms 0.00ms 3.12Kb Method call java.lang.String->length() 0.05ms 2.14ms 21.60ms 226.35ms 0.02ms 0.34Kb Method call String->concat(\"hello\") 0.08ms 2.59ms 27.30ms 287.79ms 0.03ms 2.09Kb $a = ...String->concat('hello') . ' world' 0.09ms 5.81ms 54.64ms 532.68ms 0.05ms 0.42Kb New java( java.util.HashMap , $arr) 0.16ms 3.74ms 33.78ms 351.76ms 0.04ms 67.05Kb Method call HashMap->get('arrKey') 0.04ms 2.71ms 23.37ms 267.88ms 0.03ms 0.39Kb Call (string) HashMap->get('arrKey')[0] 0.08ms 5.98ms 56.99ms 566.69ms 0.06ms 0.37Kb Iterate HashMap->get('arrKey')[0]` 0.23ms 13.40ms 133.93ms 1,252.59ms 0.13ms 2.52Kb GetValues on HashMap 0.05ms 3.67ms 36.22ms 368.43ms 0.04ms 1.27Kb New java(HashMap(array_fill(0, 100, true))) 0.20ms 12.04ms 122.62ms 1,202.73ms 0.12ms 0.63Kb Pure PHP: call PHP strlen() method 0.00ms 0.00ms 0.01ms 0.07ms 0.00ms 0.37Kb Pure PHP: concat '$string . \"hello\"' 0.00ms 0.00ms 0.04ms 0.31ms 0.00ms 120.37Kb Note Memory and average time are computed on the 11101 iterations (x1, x100...). You'll realize that average time is always lower than x1 (or x10). There's some optimzations happening on subsequent calls that make very difficult to give sense to an average here. The best is to always refer to x1 for worst-case scenario timing. Memory does not include the JVM side, that explains differences from pure php tests and Java one. The figures above will vary between systems, but intuitively you might get a glimpse about how the bridge is sensitive to the number of object creations and method calls (roundtrips): (connection time) + (number of created objects) + (number of methods) + (eventual result parsing). Imagine a very simple case with 100 objects instantiations and 100 method calls (from the PHP side): 4ms (connection) + 4.09ms (100 new strings) + 5.81ms (100 concat methods) = \u00b1 13ms minimal overhead (looks fine) . Imagine a bad scenario with 1.000 new objects and 10.000 method calls: 4ms (connection) + 34.1ms (1000 new objects) + 532.68ms (10000 concat methods) = \u00b1 570ms overhead (looks too much) . The second example should be avoided if performance matters, but the first one looks not only viable but a (micro-)service would probably not do better (parsing the result might give differences - a json_decode() vs parsing bridge response... But eventually you can also get the json from the bridge as well). As an example, generating a report with Jasper will not even require more than 10 objects and at max 100 method calls. The overhead here is clearly insignificant.","title":"Simple benchmark"},{"location":"bridge_connection/","text":"Connecting to the bridge \u00b6 Introduction \u00b6 Connection to the bridge is made through the Soluble\\Japha\\Bridge\\Adapter object and should be initialized once (similarly to a database connection) . Tip Using a container-interop compatible container like laminas-servicemanager is encouraged. Example \u00b6 <?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; use Soluble\\Japha\\Bridge\\Exception as BridgeException ; $options = [ 'servlet_address' => 'http://localhost:8080/MyJavaBridge/servlet.phpjavabridge' ]; try { $ba = new BridgeAdapter ( $options ); } catch ( BridgeException\\ConnectionException $e ) { // Server is not reachable echo $e -> getMessage (); } Parameters \u00b6 Connection params \u00b6 The Soluble\\Japha\\Bridge\\Adapter constructor requires $options , an associative array with: Parameter Description servlet_address In the form: http(s)://<host>:<port>/<context_uri>/servlet.phpjavabridge use_persistent_connection Since @2.5.0. By default false , set true for better connection times if needed. Tip Since v2.4.0, you can also provide basic auth in the servlet_address , i.e. http://user:password@localhost:8083/JavaBridge/servlet.phpjavabridge . If using basic_auth, avoid setting use_persistent_connection to true. Advanced params Description java_send_size Socket write buffer, by default 8192 . java_recv_size Socket read buffer, by default 8192 . java_log_level Log level on server (tomcat) side, by default null . force_simple_xml_parser By default false : force the Use the php xml parser instead of native xml_parser(). driver Defaults to pjb62 driver implementation. java_prefer_values By default true , see warning below. Warning In short, setting java_prefer_value to false should theoretically give more performance at the cost of some more boilerplate in the code. As the perf improvements have not been measured in practice (yet), the default is true in the soluble-japha implementation. Better to not change it as it will bc-break your code. Note The force_simple_xml_parser param can be set to true to force usage of the pure-php implementation of the xml parser. This can fix possible issues with the native xml parser when the size of an xml message exceeds 10M. Before applying this feature, always check whether it's your only option... Optional PSR-3 logger \u00b6 Optionally you can send any PSR-3 logger as the second parameter, for example with monolog : <?php //... use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; use Soluble\\Japha\\Bridge\\Exception ; use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; $options = [ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]; $logger = new Logger ( 'name' ); $logger -> pushHandler ( new StreamHandler ( 'path/to/your.log' , Logger :: WARNING )); try { $ba = new BridgeAdapter ( $options , $logger ); } catch ( Exception\\ConnectionException $e ) { // The error has been logged in your log file, check for // \"[soluble-japha] Cannot connect to php-java-bridge server (...)\" } Errors and exceptions \u00b6 During initialization with the BridgeAdapter, the following exceptions could happen : ExceptionClass Description Soluble\\Japha\\Bridge\\Exception\\ConnectionException Server not available (network port is unreachable) Soluble\\Japha\\Bridge\\Exception\\AuthenticationException Invalid credentials given in basic auth (check config) Soluble\\Japha\\Bridge\\Exception\\ConfigurationException Invalid connection parameter (check config) Soluble\\Japha\\Bridge\\Exception\\UnsupportedDriverException Specified driver is not supported (check config) Soluble\\Japha\\Bridge\\Exception\\InvalidArgumentException Invalid argument in constructor (check usage) Warning To provide faster initialization, soluble-japha does not deeply check the connection and consider a running http(s) port as valid. This can lead to confusion if your connection params points to a different running servlet. In this case the ConnectionException won't be thrown but you'll experience a Soluble\\Japha\\Bridge\\Exception\\BrokenConnectionException when calling java objects. A classic example: you forgot to include the servlet uri in your connection params. Instead of setting http://localhost:8080/MyJavaBridge/servlet.phpjavabridge , you've passed http://localhost:8080/servlet.phpjavabridge . The connection will succeed (no ConnectionException will be thrown) because there's a listening server. But once you'll call a method on the bridge you'll end up with the BrokenConnectionException . Fix your config to the correct bridge address. Server debugging \u00b6 Debugging can be enabled through the connection (@see java_log_level). 0: Log nothing, not even fatal errors. 1: Log fatal system errors such as \"out of memory error\". 2: Log java exceptions. 3: Log verbose, e.g.: \"JavaBridge version x.y.z started\" 4: Log debug messages, including the c/s communication protocol. 5: Log method invocations, including method selection. 6: Reserved for internal use. Log messages which may be useful to debug certain parts of the bridge. If using tomcat logged messages will be present in catalina.out.","title":"Connection"},{"location":"bridge_connection/#connecting-to-the-bridge","text":"","title":"Connecting to the bridge"},{"location":"bridge_connection/#introduction","text":"Connection to the bridge is made through the Soluble\\Japha\\Bridge\\Adapter object and should be initialized once (similarly to a database connection) . Tip Using a container-interop compatible container like laminas-servicemanager is encouraged.","title":"Introduction"},{"location":"bridge_connection/#example","text":"<?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; use Soluble\\Japha\\Bridge\\Exception as BridgeException ; $options = [ 'servlet_address' => 'http://localhost:8080/MyJavaBridge/servlet.phpjavabridge' ]; try { $ba = new BridgeAdapter ( $options ); } catch ( BridgeException\\ConnectionException $e ) { // Server is not reachable echo $e -> getMessage (); }","title":"Example"},{"location":"bridge_connection/#parameters","text":"","title":"Parameters"},{"location":"bridge_connection/#connection-params","text":"The Soluble\\Japha\\Bridge\\Adapter constructor requires $options , an associative array with: Parameter Description servlet_address In the form: http(s)://<host>:<port>/<context_uri>/servlet.phpjavabridge use_persistent_connection Since @2.5.0. By default false , set true for better connection times if needed. Tip Since v2.4.0, you can also provide basic auth in the servlet_address , i.e. http://user:password@localhost:8083/JavaBridge/servlet.phpjavabridge . If using basic_auth, avoid setting use_persistent_connection to true. Advanced params Description java_send_size Socket write buffer, by default 8192 . java_recv_size Socket read buffer, by default 8192 . java_log_level Log level on server (tomcat) side, by default null . force_simple_xml_parser By default false : force the Use the php xml parser instead of native xml_parser(). driver Defaults to pjb62 driver implementation. java_prefer_values By default true , see warning below. Warning In short, setting java_prefer_value to false should theoretically give more performance at the cost of some more boilerplate in the code. As the perf improvements have not been measured in practice (yet), the default is true in the soluble-japha implementation. Better to not change it as it will bc-break your code. Note The force_simple_xml_parser param can be set to true to force usage of the pure-php implementation of the xml parser. This can fix possible issues with the native xml parser when the size of an xml message exceeds 10M. Before applying this feature, always check whether it's your only option...","title":"Connection params"},{"location":"bridge_connection/#optional-psr-3-logger","text":"Optionally you can send any PSR-3 logger as the second parameter, for example with monolog : <?php //... use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; use Soluble\\Japha\\Bridge\\Exception ; use Monolog\\Logger ; use Monolog\\Handler\\StreamHandler ; $options = [ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]; $logger = new Logger ( 'name' ); $logger -> pushHandler ( new StreamHandler ( 'path/to/your.log' , Logger :: WARNING )); try { $ba = new BridgeAdapter ( $options , $logger ); } catch ( Exception\\ConnectionException $e ) { // The error has been logged in your log file, check for // \"[soluble-japha] Cannot connect to php-java-bridge server (...)\" }","title":"Optional PSR-3 logger"},{"location":"bridge_connection/#errors-and-exceptions","text":"During initialization with the BridgeAdapter, the following exceptions could happen : ExceptionClass Description Soluble\\Japha\\Bridge\\Exception\\ConnectionException Server not available (network port is unreachable) Soluble\\Japha\\Bridge\\Exception\\AuthenticationException Invalid credentials given in basic auth (check config) Soluble\\Japha\\Bridge\\Exception\\ConfigurationException Invalid connection parameter (check config) Soluble\\Japha\\Bridge\\Exception\\UnsupportedDriverException Specified driver is not supported (check config) Soluble\\Japha\\Bridge\\Exception\\InvalidArgumentException Invalid argument in constructor (check usage) Warning To provide faster initialization, soluble-japha does not deeply check the connection and consider a running http(s) port as valid. This can lead to confusion if your connection params points to a different running servlet. In this case the ConnectionException won't be thrown but you'll experience a Soluble\\Japha\\Bridge\\Exception\\BrokenConnectionException when calling java objects. A classic example: you forgot to include the servlet uri in your connection params. Instead of setting http://localhost:8080/MyJavaBridge/servlet.phpjavabridge , you've passed http://localhost:8080/servlet.phpjavabridge . The connection will succeed (no ConnectionException will be thrown) because there's a listening server. But once you'll call a method on the bridge you'll end up with the BrokenConnectionException . Fix your config to the correct bridge address.","title":"Errors and exceptions"},{"location":"bridge_connection/#server-debugging","text":"Debugging can be enabled through the connection (@see java_log_level). 0: Log nothing, not even fatal errors. 1: Log fatal system errors such as \"out of memory error\". 2: Log java exceptions. 3: Log verbose, e.g.: \"JavaBridge version x.y.z started\" 4: Log debug messages, including the c/s communication protocol. 5: Log method invocations, including method selection. 6: Reserved for internal use. Log messages which may be useful to debug certain parts of the bridge. If using tomcat logged messages will be present in catalina.out.","title":"Server debugging"},{"location":"bridge_how_it_works/","text":"How it works \u00b6 The big picture \u00b6 Behind the scenes, all Java object instantiations and method calls are forwarded to the JVM through a maintained connection tunnel with the JavaBridge server. You can think about it like a database connection on which you execute tiny queries, but with some differences: The protocol used between Java and PHP is based on HTTP and serialized in XML. Here's what would be transmitted if you call $ba->javaClass('myJClass')->aJMethod(2) : <c value= \"myJClass\" p= \"Class\" ></c> <i value= \"0\" method= \"aJMethod\" p= \"Invoke\" ><object value= \"2\" /></i> In addition to this, object state is automatically maintained between both Java and PHP runtimes. The PHP client keeping a proxied object representation over its counterpart on the JVM side. To complete the picture, there is also some magic happening for handling types differences (casting) and method overloading (that is not supported by PHP). Consequences \u00b6 Look at the benchmarks where you can have a glimpse on how the bridge is sensitive to the number of roundtrips and then to the possible optimizations techniques to reduce the number of roundtrips.","title":"How it works"},{"location":"bridge_how_it_works/#how-it-works","text":"","title":"How it works"},{"location":"bridge_how_it_works/#the-big-picture","text":"Behind the scenes, all Java object instantiations and method calls are forwarded to the JVM through a maintained connection tunnel with the JavaBridge server. You can think about it like a database connection on which you execute tiny queries, but with some differences: The protocol used between Java and PHP is based on HTTP and serialized in XML. Here's what would be transmitted if you call $ba->javaClass('myJClass')->aJMethod(2) : <c value= \"myJClass\" p= \"Class\" ></c> <i value= \"0\" method= \"aJMethod\" p= \"Invoke\" ><object value= \"2\" /></i> In addition to this, object state is automatically maintained between both Java and PHP runtimes. The PHP client keeping a proxied object representation over its counterpart on the JVM side. To complete the picture, there is also some magic happening for handling types differences (casting) and method overloading (that is not supported by PHP).","title":"The big picture"},{"location":"bridge_how_it_works/#consequences","text":"Look at the benchmarks where you can have a glimpse on how the bridge is sensitive to the number of roundtrips and then to the possible optimizations techniques to reduce the number of roundtrips.","title":"Consequences"},{"location":"bridge_servlet_context/","text":"Servlet context \u00b6 If the bridge is deployed on Tomcat (not the standalone version), you can access the servlet context through the internal driver: Example \u00b6 <?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; $ba = new BridgeAdapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]); // $context is either // JavaObject: Java('io.soluble.pjb.servlet.HttpContext') - for soluble/php-java-bridge 6.2.11+ // JavaObject: Java('php.java.servlet.HttpContext') - for original php-java-bridge 6.2.1 $context = $adapter -> getDriver () -> getContext (); // $httpServletRequest is either // JavaObject: Java('io.soluble.pjb.servlet.RemoteHttpServletRequest') - for soluble/php-java-bridge 6.2.11+ // JavaObject: Java('php.java.servlet.RemoteServletRequest') - for original php-java-bridge 6.2.1 $httpServletRequest = $context -> getHttpServletRequest (); // $servlet is either // JavaObject: Java('io.soluble.pjb.servlet.PhpJavaServlet') object for soluble/php-java-bridge 6.2.11+ // JavaObject: Java('php.java.servlet.PhpJavaServlet') - for original php-java-bridge 6.2.1 $servlet = $context -> getServlet (); // $servletContext on Tomcat would be // JavaObject: org.apache.catalina.core.ApplicationContextFacade $servletContext = $context -> getServletContext (); // $servletConfig on Tomcat would be // JavaObject: 'org.apache.catalina.core.StandardWrapperFacade $servletConfig = $context -> getServlet () -> getServletConfig ();","title":"Servlet context"},{"location":"bridge_servlet_context/#servlet-context","text":"If the bridge is deployed on Tomcat (not the standalone version), you can access the servlet context through the internal driver:","title":"Servlet context"},{"location":"bridge_servlet_context/#example","text":"<?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; $ba = new BridgeAdapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]); // $context is either // JavaObject: Java('io.soluble.pjb.servlet.HttpContext') - for soluble/php-java-bridge 6.2.11+ // JavaObject: Java('php.java.servlet.HttpContext') - for original php-java-bridge 6.2.1 $context = $adapter -> getDriver () -> getContext (); // $httpServletRequest is either // JavaObject: Java('io.soluble.pjb.servlet.RemoteHttpServletRequest') - for soluble/php-java-bridge 6.2.11+ // JavaObject: Java('php.java.servlet.RemoteServletRequest') - for original php-java-bridge 6.2.1 $httpServletRequest = $context -> getHttpServletRequest (); // $servlet is either // JavaObject: Java('io.soluble.pjb.servlet.PhpJavaServlet') object for soluble/php-java-bridge 6.2.11+ // JavaObject: Java('php.java.servlet.PhpJavaServlet') - for original php-java-bridge 6.2.1 $servlet = $context -> getServlet (); // $servletContext on Tomcat would be // JavaObject: org.apache.catalina.core.ApplicationContextFacade $servletContext = $context -> getServletContext (); // $servletConfig on Tomcat would be // JavaObject: 'org.apache.catalina.core.StandardWrapperFacade $servletConfig = $context -> getServlet () -> getServletConfig ();","title":"Example"},{"location":"bridge_servlet_functions/","text":"Servlet functions \u00b6 It's possible to call a specific java servlet function with the $ba->getDriver()->invoke() method. Just ensure the first parameter is null. Example \u00b6 <?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; $ba = new BridgeAdapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]); // To get the servlet options in use. $options = $ba -> getDriver () -> invoke ( null , 'getOptions' ); // To set file_encoding $encoding = $ba -> getDriver () -> invoke ( null , 'setFileEncoding' , [ 'ASCII' ]);","title":"Servlet functions"},{"location":"bridge_servlet_functions/#servlet-functions","text":"It's possible to call a specific java servlet function with the $ba->getDriver()->invoke() method. Just ensure the first parameter is null.","title":"Servlet functions"},{"location":"bridge_servlet_functions/#example","text":"<?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; $ba = new BridgeAdapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]); // To get the servlet options in use. $options = $ba -> getDriver () -> invoke ( null , 'getOptions' ); // To set file_encoding $encoding = $ba -> getDriver () -> invoke ( null , 'setFileEncoding' , [ 'ASCII' ]);","title":"Example"},{"location":"bridge_servlet_session/","text":"Servlet session \u00b6 If the bridge is deployed on Tomcat (not the standalone version), you can access the servlet session through the internal driver: Example \u00b6 <?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; $ba = new BridgeAdapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]); $javaSession = $adapter -> getDriver () -> getJavaSession (); $counter = $javaSession -> get ( 'counter' ); if ( $ba -> isNull ( $counter )) { $session -> put ( 'counter' , 1 ); } else { $session -> put ( 'counter' , $counter + 1 ); }","title":"Servlet session"},{"location":"bridge_servlet_session/#servlet-session","text":"If the bridge is deployed on Tomcat (not the standalone version), you can access the servlet session through the internal driver:","title":"Servlet session"},{"location":"bridge_servlet_session/#example","text":"<?php use Soluble\\Japha\\Bridge\\Adapter as BridgeAdapter ; $ba = new BridgeAdapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8089/servlet.phpjavabridge' ]); $javaSession = $adapter -> getDriver () -> getJavaSession (); $counter = $javaSession -> get ( 'counter' ); if ( $ba -> isNull ( $counter )) { $session -> put ( 'counter' , 1 ); } else { $session -> put ( 'counter' , $counter + 1 ); }","title":"Example"},{"location":"install_client/","text":"PHP installation \u00b6 PHP7.4 & PHP8.0 $ composer require soluble/japha PHP7.2 $ composer require soluble/japha@2.8.0 PHP7.1 $ composer require \"soluble/japha@^2.7.0\" PHP 5.6 For PHP5.6, use the ^1.0.0 version, BC compat with ^2.0.0. $ composer require \"soluble/japha@^1.4.0\" PHP 5.5 For PHP5.5, use the ^0.13.0 version. $ composer require \"soluble/japha@^0.13.0\" Tip Once done, jump to the server install step. Notes \u00b6 If you're not familiar with composer you can jump to the official install docs , ensure soluble-japha:^2.0 (or soluble-japha:^1.0 ) is present in your project composer.json file and run the composer update command. Most modern frameworks relies on composer out of the box, if not the case ensure the following file is included in your bootstrap file (index.php, ...) : <?php // include the composer autoloader require 'vendor/autoload.php' ;","title":"PHP install"},{"location":"install_client/#php-installation","text":"PHP7.4 & PHP8.0 $ composer require soluble/japha PHP7.2 $ composer require soluble/japha@2.8.0 PHP7.1 $ composer require \"soluble/japha@^2.7.0\" PHP 5.6 For PHP5.6, use the ^1.0.0 version, BC compat with ^2.0.0. $ composer require \"soluble/japha@^1.4.0\" PHP 5.5 For PHP5.5, use the ^0.13.0 version. $ composer require \"soluble/japha@^0.13.0\" Tip Once done, jump to the server install step.","title":"PHP installation"},{"location":"install_client/#notes","text":"If you're not familiar with composer you can jump to the official install docs , ensure soluble-japha:^2.0 (or soluble-japha:^1.0 ) is present in your project composer.json file and run the composer update command. Most modern frameworks relies on composer out of the box, if not the case ensure the following file is included in your bootstrap file (index.php, ...) : <?php // include the composer autoloader require 'vendor/autoload.php' ;","title":"Notes"},{"location":"install_server/","text":"Javabridge server installation \u00b6 Info A Javabridge server is required and acts as an intermediate between the JVM and PHP runtime. Here's the steps to customize, build and run your own instance. Don't be afraid, it takes few minutes. Requirements \u00b6 An installed OpenJDK or OracleJDK, 7 or 8+ (JRE is sufficient for running) . The recommended Apache Tomcat server for deployments (any servlet 2.5+ spec container should work) or the webapp-runner for standalone. Java installation \u00b6 On ubuntu based systems, you can install java by typing: $ sudo apt-get install openjdk-8-jdk For other recipes and systems, refer to the extended java installation notes . Quick install \u00b6 Note The quick install instructions are based on the forked php-java-bridge server . They promote the recommended installation workflow based on Tomcat , a popular servlet container server widely available nowadays (i.e: Digitalocean droplets...) . A optional section describe how to use the webapp-runner instead of regular Tomcat install. This allows to start, control the bridge server straight from the command line (standalone) or deploy on some cloud services (i.e. Heroku). For spring-boot support, you can also look at Alternative installation section . Build and customize \u00b6 Replace the version below by the latest Javabridge release : # 1. Download and unzip the latest php-java-bridge sources $ wget https://github.com/belgattitude/php-java-bridge/archive/7.1.3.zip -O pjb.zip $ unzip pjb.zip && cd php-java-bridge-7.1.3 # 2. Customize and build your own bridge: # Example below contains some pre-made gradle init scripts # to include jasperreports and mysql-connector libraries to the # build. They are optional, remove the (-I) parts or provide # your own. $ ./gradlew war \\ -I init-scripts/init.jasperreports.gradle \\ -I init-scripts/init.mysql.gradle # The build files are generated in the '/build/libs' folder. Tip As shown above, adding library dependencies can be done easily through gradle init-scripts arguments (-I). To learn mode, have a look to some pre-made init scripts included in the latest distribution or provide your own. Deploy and run \u00b6 Danger For security reasons, the Javabridge server cannot be exposed on a public network. It must be limited to interactions on the same host/network and should be executed with the same user as the php client (not root). Bind Tomcat to localhost or setup a firewall where applicable. Option 1: Tomcat \u00b6 Ensure Tomcat is installed or quickly run sudo apt-get install tomcat8 on Ubuntu based systems, then copy the builded war file in the tomcat webapps folder. # 3. Deploy or update the servlet on Tomcat: # Example below is based on Ubuntu with Tomcat8 # and can be applied in the same way for other systems, # just replace the webapp directory location. $ cp ./build/libs/JavaBridgeTemplate.war /var/lib/tomcat8/webapps/MyJavaBridge.war Tomcat will automatically deploy and register the servlet. Wait few seconds and point your browser to http://localhost:8080/MyJavaBridge (note the /MyJavaBridge uri corresponds to the deployed war filename, easily changeable) and check the landing page: Option 2: Standalone \u00b6 The webapp-runner actually embeds a standalone runnable Tomcat and is a viable option for those who don't want to install an additional system wide server. You can download the webapp-runner on maven central or alternatively from the command line: # Get the latest webapp-runner from maven. $ export WR_VERSION = \"9.0.27.1\" ; $ WEBAPP_RUNNER_URL = \"https://repo.maven.apache.org/maven2/com/github/jsimone/webapp-runner/ ${ WR_VERSION } /webapp-runner- ${ WR_VERSION } .jar\" Run your server JavaBridgeTemplate.war file with the webapp-runner: $ java -jar webapp-runner.jar /path/to/JavaBridgeTemplate.war --port 8093 See travis example script here . Using the bridge \u00b6 Once the connection is working, jump to the Getting started and how to connect section . Alternative install \u00b6 Summary This install method should be considered whenever you need a standalone binary or intend to develop your own java classes in a sprint-boot architecture. This alternative install method is based on the pjb-starter-springboot starter kit. In comparison to the quick installation above: Provide also a binary runnable from the cli (standalone / embedded Tomcat 8.5+). Foundation to add write extra Java code in the spring-boot way (skeleton). Heavier size (approx 10Mb more than the barebone version: 1Mb, 15Mb more for standalone) No performance regressions measured from the barebone PHP/Javabridge Might not include the latest release of the bridge (not as frequently updated). Please check the pjb-starter-springboot to get the latest instructions or follow the procedure below: Build and customize \u00b6 The instructions are very similar from the barebone PHP/Javabridge installation described above: # 1. Clone the pjb-starter-springboot skeleton (-b to checkout a specific release) $ git clone https://github.com/belgattitude/pjb-starter-springboot $ cd pjb-starter-springboot # 2. Customize and build your own bridge: # Example below contains some pre-made gradle init scripts # to include jasperreports and mysql-connector libraries to the # build. They are optional, remove the (-I) parts or provide # your own. $ ./gradlew build \\ -I init-scripts/init.jasperreports.gradle \\ -I init-scripts/init.mysql.gradle # The build files are generated in the '/build/libs' folder. Tip As shown above, adding library dependencies can be done easily through gradle init-scripts arguments (-I). To learn mode, have a look to some pre-made init scripts included in the latest distribution or provide your own. And check the build\\libs directory for the following files: File Description Approx. size JavaBridgeStandalone.jar Standalone server with an embedded Tomcat 8.5+. \u00b1 32Mb JavaBridgeTemplate.war War file, ready to drop into Tomcat webapps folder. \u00b1 12Mb Run in standalone \u00b6 You can easily run the a JavaBridgeStandalone.jar file from the cli: # Run the PHPJavaBridge server in standalone $ java -jar ./build/libs/JavaBridgeStandalone.jar -Dserver_port = 8089 Check the landing page for status and use the connection localhost:8089/servlet.phpjavabridge in your bridge connection parameters. Tip As the standalone version embeds and runs on Tomcat 8.5+ you might wonder how it compares from a regular tomcat deployment? One important difference concerns the system integration and with the provided OS version: Error and log files are maintained and rotated in standard directories. Automatic startup is provided out-of-the-box. And if standalone gives a lot of freedom, it comes with the need to control the service by yourself (supervisord or cli scripts...). Up to you to decide which method is applicable, the pjb-starter-springboot offers both posibilities. Run on Tomcat \u00b6 Ensure Tomcat is installed or quickly run sudo apt-get install tomcat8 on Ubuntu based systems, then copy the builded war file in the tomcat webapps folder. # 3. Deploy or update the servlet on Tomcat: # Example below is based on Ubuntu with Tomcat8 # and can be applied in the same way for other systems, # just replace the webapp directory location. $ cp ./build/libs/JavaBridgeTemplate.war /var/lib/tomcat8/webapps/MyJavaBridge.war Tomcat will automatically deploy and register the servlet. Wait few seconds and point your browser to http://localhost:8080/MyJavaBridge (note the /MyJavaBridge uri corresponds to the deployed war filename, easily changeable) and check the landing page: Warning For obvious security reasons, the Javabridge server cannot be exposed on a public network. It must be limited to interactions on the same host/network and should be executed with the same user as the php client (not root). Bind Tomcat to localhost or setup a firewall where applicable. Composer install \u00b6 As a third alternative, the pjbserver-tools standalone server offer a pre-made server binary and can be installed straight from composer. Warning The pjbserver-tools package is not fit for production usage (yet), its best use is for unit-tests (travis...) or local development only.","title":"JavaBridge server"},{"location":"install_server/#javabridge-server-installation","text":"Info A Javabridge server is required and acts as an intermediate between the JVM and PHP runtime. Here's the steps to customize, build and run your own instance. Don't be afraid, it takes few minutes.","title":"Javabridge server installation"},{"location":"install_server/#requirements","text":"An installed OpenJDK or OracleJDK, 7 or 8+ (JRE is sufficient for running) . The recommended Apache Tomcat server for deployments (any servlet 2.5+ spec container should work) or the webapp-runner for standalone.","title":"Requirements"},{"location":"install_server/#java-installation","text":"On ubuntu based systems, you can install java by typing: $ sudo apt-get install openjdk-8-jdk For other recipes and systems, refer to the extended java installation notes .","title":"Java installation"},{"location":"install_server/#quick-install","text":"Note The quick install instructions are based on the forked php-java-bridge server . They promote the recommended installation workflow based on Tomcat , a popular servlet container server widely available nowadays (i.e: Digitalocean droplets...) . A optional section describe how to use the webapp-runner instead of regular Tomcat install. This allows to start, control the bridge server straight from the command line (standalone) or deploy on some cloud services (i.e. Heroku). For spring-boot support, you can also look at Alternative installation section .","title":"Quick install"},{"location":"install_server/#build-and-customize","text":"Replace the version below by the latest Javabridge release : # 1. Download and unzip the latest php-java-bridge sources $ wget https://github.com/belgattitude/php-java-bridge/archive/7.1.3.zip -O pjb.zip $ unzip pjb.zip && cd php-java-bridge-7.1.3 # 2. Customize and build your own bridge: # Example below contains some pre-made gradle init scripts # to include jasperreports and mysql-connector libraries to the # build. They are optional, remove the (-I) parts or provide # your own. $ ./gradlew war \\ -I init-scripts/init.jasperreports.gradle \\ -I init-scripts/init.mysql.gradle # The build files are generated in the '/build/libs' folder. Tip As shown above, adding library dependencies can be done easily through gradle init-scripts arguments (-I). To learn mode, have a look to some pre-made init scripts included in the latest distribution or provide your own.","title":"Build and customize"},{"location":"install_server/#deploy-and-run","text":"Danger For security reasons, the Javabridge server cannot be exposed on a public network. It must be limited to interactions on the same host/network and should be executed with the same user as the php client (not root). Bind Tomcat to localhost or setup a firewall where applicable.","title":"Deploy and run"},{"location":"install_server/#option-1-tomcat","text":"Ensure Tomcat is installed or quickly run sudo apt-get install tomcat8 on Ubuntu based systems, then copy the builded war file in the tomcat webapps folder. # 3. Deploy or update the servlet on Tomcat: # Example below is based on Ubuntu with Tomcat8 # and can be applied in the same way for other systems, # just replace the webapp directory location. $ cp ./build/libs/JavaBridgeTemplate.war /var/lib/tomcat8/webapps/MyJavaBridge.war Tomcat will automatically deploy and register the servlet. Wait few seconds and point your browser to http://localhost:8080/MyJavaBridge (note the /MyJavaBridge uri corresponds to the deployed war filename, easily changeable) and check the landing page:","title":"Option 1: Tomcat"},{"location":"install_server/#option-2-standalone","text":"The webapp-runner actually embeds a standalone runnable Tomcat and is a viable option for those who don't want to install an additional system wide server. You can download the webapp-runner on maven central or alternatively from the command line: # Get the latest webapp-runner from maven. $ export WR_VERSION = \"9.0.27.1\" ; $ WEBAPP_RUNNER_URL = \"https://repo.maven.apache.org/maven2/com/github/jsimone/webapp-runner/ ${ WR_VERSION } /webapp-runner- ${ WR_VERSION } .jar\" Run your server JavaBridgeTemplate.war file with the webapp-runner: $ java -jar webapp-runner.jar /path/to/JavaBridgeTemplate.war --port 8093 See travis example script here .","title":"Option 2: Standalone"},{"location":"install_server/#using-the-bridge","text":"Once the connection is working, jump to the Getting started and how to connect section .","title":"Using the bridge"},{"location":"install_server/#alternative-install","text":"Summary This install method should be considered whenever you need a standalone binary or intend to develop your own java classes in a sprint-boot architecture. This alternative install method is based on the pjb-starter-springboot starter kit. In comparison to the quick installation above: Provide also a binary runnable from the cli (standalone / embedded Tomcat 8.5+). Foundation to add write extra Java code in the spring-boot way (skeleton). Heavier size (approx 10Mb more than the barebone version: 1Mb, 15Mb more for standalone) No performance regressions measured from the barebone PHP/Javabridge Might not include the latest release of the bridge (not as frequently updated). Please check the pjb-starter-springboot to get the latest instructions or follow the procedure below:","title":"Alternative install"},{"location":"install_server/#build-and-customize_1","text":"The instructions are very similar from the barebone PHP/Javabridge installation described above: # 1. Clone the pjb-starter-springboot skeleton (-b to checkout a specific release) $ git clone https://github.com/belgattitude/pjb-starter-springboot $ cd pjb-starter-springboot # 2. Customize and build your own bridge: # Example below contains some pre-made gradle init scripts # to include jasperreports and mysql-connector libraries to the # build. They are optional, remove the (-I) parts or provide # your own. $ ./gradlew build \\ -I init-scripts/init.jasperreports.gradle \\ -I init-scripts/init.mysql.gradle # The build files are generated in the '/build/libs' folder. Tip As shown above, adding library dependencies can be done easily through gradle init-scripts arguments (-I). To learn mode, have a look to some pre-made init scripts included in the latest distribution or provide your own. And check the build\\libs directory for the following files: File Description Approx. size JavaBridgeStandalone.jar Standalone server with an embedded Tomcat 8.5+. \u00b1 32Mb JavaBridgeTemplate.war War file, ready to drop into Tomcat webapps folder. \u00b1 12Mb","title":"Build and customize"},{"location":"install_server/#run-in-standalone","text":"You can easily run the a JavaBridgeStandalone.jar file from the cli: # Run the PHPJavaBridge server in standalone $ java -jar ./build/libs/JavaBridgeStandalone.jar -Dserver_port = 8089 Check the landing page for status and use the connection localhost:8089/servlet.phpjavabridge in your bridge connection parameters. Tip As the standalone version embeds and runs on Tomcat 8.5+ you might wonder how it compares from a regular tomcat deployment? One important difference concerns the system integration and with the provided OS version: Error and log files are maintained and rotated in standard directories. Automatic startup is provided out-of-the-box. And if standalone gives a lot of freedom, it comes with the need to control the service by yourself (supervisord or cli scripts...). Up to you to decide which method is applicable, the pjb-starter-springboot offers both posibilities.","title":"Run in standalone"},{"location":"install_server/#run-on-tomcat","text":"Ensure Tomcat is installed or quickly run sudo apt-get install tomcat8 on Ubuntu based systems, then copy the builded war file in the tomcat webapps folder. # 3. Deploy or update the servlet on Tomcat: # Example below is based on Ubuntu with Tomcat8 # and can be applied in the same way for other systems, # just replace the webapp directory location. $ cp ./build/libs/JavaBridgeTemplate.war /var/lib/tomcat8/webapps/MyJavaBridge.war Tomcat will automatically deploy and register the servlet. Wait few seconds and point your browser to http://localhost:8080/MyJavaBridge (note the /MyJavaBridge uri corresponds to the deployed war filename, easily changeable) and check the landing page: Warning For obvious security reasons, the Javabridge server cannot be exposed on a public network. It must be limited to interactions on the same host/network and should be executed with the same user as the php client (not root). Bind Tomcat to localhost or setup a firewall where applicable.","title":"Run on Tomcat"},{"location":"install_server/#composer-install","text":"As a third alternative, the pjbserver-tools standalone server offer a pre-made server binary and can be installed straight from composer. Warning The pjbserver-tools package is not fit for production usage (yet), its best use is for unit-tests (travis...) or local development only.","title":"Composer install"},{"location":"install_server_j2ee/","text":"Bridge installation on a J2EE server \u00b6 This document shows how to deploy the bridge as a servlet on the Tomcat server. Install tomcat \u00b6 A generic Tomcat installation is located here . Create a java bridge deployable .war file. \u00b6 Create a deployable servlet, you can use the following snippet : # Download $ wget \"http://downloads.sourceforge.net/project/php-java-bridge/Binary%20package/php-java-bridge_6.2.1/JavaBridgeTemplate621.war?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fphp-java-bridge%2Ffiles%2FBinary%2520package%2Fphp-java-bridge_6.2.1%2F&ts=1415114437&use_mirror=softlayer-ams\" -O JavaBridgeTemplate621.war ; # Extract jars into a war structure $ mkdir -p ./pjb_war/dist/WEB-INF/lib ; $ unzip -o -j JavaBridgeTemplate621.war WEB-INF/lib/*.jar -d ./pjb_war/dist/WEB-INF/lib ; # Add as many dependencies as you want in the WEB-INF/lib directory # For example mysql connector, jasper report, custom fonts... # See also web.xml configuration at the end of document. # Bundle a war file (the name phpjavabridge-bundle can be changed) $ cd ./pjb_war ; $ jar -cvf phpjavabridge-bundle.war . Deploy the WAR file on your tomcat server \u00b6 Use the tomcat admin interface to upload the war file or simply drop the javabridge-bundle.war into /var/lib/tomcat7/webapps/ and reload. Notes about web.xml configuration \u00b6 The standard web.xml configuration can be used. Alternatively you can provide your own file before building .war file. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"> <web-app> <!-- support for JEE cluster, remove this line if you want to put non-serializable objects into the java_session() --> <distributable/> <context-param> <!-- Option 1: Only if you want to rely on the default php-cgi binary <param-name>prefer_system_php_exec</param-name> <param-value>On</param-value> --> <!-- Option 2: set location of the php-cgi binary --> <param-name> php_exec </param-name> <param-value> /usr/bin/php-cgi </param-value> </context-param> <!-- Handle PHP urls which cannot be expressed using a standard servlet spec 2.2 url-pattern, e.g.: *.php/delete/from?what=that You may remove this and the filter-mapping below --> <filter> <filter-name> PhpCGIFilter </filter-name> <filter-class> php.java.servlet.PhpCGIFilter </filter-class> </filter> <filter-mapping> <filter-name> PhpCGIFilter </filter-name> <url-pattern> /* </url-pattern> </filter-mapping> <!-- Attach the JSR223 script factory to the servlet context --> <listener> <listener-class> php.java.servlet.ContextLoaderListener </listener-class> </listener> <!-- PHP Servlet: back-end for Apache or IIS --> <servlet> <servlet-name> PhpJavaServlet </servlet-name> <servlet-class> php.java.servlet.PhpJavaServlet </servlet-class> </servlet> <!-- PHP CGI servlet: when IIS or Apache are not available --> <servlet> <servlet-name> PhpCGIServlet </servlet-name> <servlet-class> php.java.servlet.fastcgi.FastCGIServlet </servlet-class> </servlet> <!-- PHP Servlet Mapping --> <servlet-mapping> <servlet-name> PhpJavaServlet </servlet-name> <url-pattern> *.phpjavabridge </url-pattern> </servlet-mapping> <!-- PHP CGI Servlet Mapping --> <servlet-mapping> <servlet-name> PhpCGIServlet </servlet-name> <url-pattern> *.php </url-pattern> </servlet-mapping> <!-- Welcome files --> <welcome-file-list> <welcome-file> index.php </welcome-file> </welcome-file-list> </web-app>","title":"Install server j2ee"},{"location":"install_server_j2ee/#bridge-installation-on-a-j2ee-server","text":"This document shows how to deploy the bridge as a servlet on the Tomcat server.","title":"Bridge installation on a J2EE server"},{"location":"install_server_j2ee/#install-tomcat","text":"A generic Tomcat installation is located here .","title":"Install tomcat"},{"location":"install_server_j2ee/#create-a-java-bridge-deployable-war-file","text":"Create a deployable servlet, you can use the following snippet : # Download $ wget \"http://downloads.sourceforge.net/project/php-java-bridge/Binary%20package/php-java-bridge_6.2.1/JavaBridgeTemplate621.war?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fphp-java-bridge%2Ffiles%2FBinary%2520package%2Fphp-java-bridge_6.2.1%2F&ts=1415114437&use_mirror=softlayer-ams\" -O JavaBridgeTemplate621.war ; # Extract jars into a war structure $ mkdir -p ./pjb_war/dist/WEB-INF/lib ; $ unzip -o -j JavaBridgeTemplate621.war WEB-INF/lib/*.jar -d ./pjb_war/dist/WEB-INF/lib ; # Add as many dependencies as you want in the WEB-INF/lib directory # For example mysql connector, jasper report, custom fonts... # See also web.xml configuration at the end of document. # Bundle a war file (the name phpjavabridge-bundle can be changed) $ cd ./pjb_war ; $ jar -cvf phpjavabridge-bundle.war .","title":"Create a java bridge deployable .war file."},{"location":"install_server_j2ee/#deploy-the-war-file-on-your-tomcat-server","text":"Use the tomcat admin interface to upload the war file or simply drop the javabridge-bundle.war into /var/lib/tomcat7/webapps/ and reload.","title":"Deploy the WAR file on your tomcat server"},{"location":"install_server_j2ee/#notes-about-webxml-configuration","text":"The standard web.xml configuration can be used. Alternatively you can provide your own file before building .war file. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"> <web-app> <!-- support for JEE cluster, remove this line if you want to put non-serializable objects into the java_session() --> <distributable/> <context-param> <!-- Option 1: Only if you want to rely on the default php-cgi binary <param-name>prefer_system_php_exec</param-name> <param-value>On</param-value> --> <!-- Option 2: set location of the php-cgi binary --> <param-name> php_exec </param-name> <param-value> /usr/bin/php-cgi </param-value> </context-param> <!-- Handle PHP urls which cannot be expressed using a standard servlet spec 2.2 url-pattern, e.g.: *.php/delete/from?what=that You may remove this and the filter-mapping below --> <filter> <filter-name> PhpCGIFilter </filter-name> <filter-class> php.java.servlet.PhpCGIFilter </filter-class> </filter> <filter-mapping> <filter-name> PhpCGIFilter </filter-name> <url-pattern> /* </url-pattern> </filter-mapping> <!-- Attach the JSR223 script factory to the servlet context --> <listener> <listener-class> php.java.servlet.ContextLoaderListener </listener-class> </listener> <!-- PHP Servlet: back-end for Apache or IIS --> <servlet> <servlet-name> PhpJavaServlet </servlet-name> <servlet-class> php.java.servlet.PhpJavaServlet </servlet-class> </servlet> <!-- PHP CGI servlet: when IIS or Apache are not available --> <servlet> <servlet-name> PhpCGIServlet </servlet-name> <servlet-class> php.java.servlet.fastcgi.FastCGIServlet </servlet-class> </servlet> <!-- PHP Servlet Mapping --> <servlet-mapping> <servlet-name> PhpJavaServlet </servlet-name> <url-pattern> *.phpjavabridge </url-pattern> </servlet-mapping> <!-- PHP CGI Servlet Mapping --> <servlet-mapping> <servlet-name> PhpCGIServlet </servlet-name> <url-pattern> *.php </url-pattern> </servlet-mapping> <!-- Welcome files --> <welcome-file-list> <welcome-file> index.php </welcome-file> </welcome-file-list> </web-app>","title":"Notes about web.xml configuration"},{"location":"language_basics/","text":"Language basics \u00b6 Note Coding Java from PHP is relatively similar to an equivalent pure Java code. To avoid confusion while developing you must keep aware that: Java supports overloading for methods (and constructors). PHP have the multipurpose array for everything, Java does not. See here to learn more. DateTime and timezones are handled differenlty, see here to learn more. Java supports inner classes. See here And remember While array and scalar types (int, string, bool, float) are automatically casted, testing on null and booleans requires the use of $ba->isNull() and $ba->isTrue() methods. See here to learn more. PHP use the :: for static method calls and constants where Java does not . . soluble-japha brings solutions to those problems, but primary reflexes might not work (i.e. you try to call a static java method through the bridge with '::' instead of the regular '->'...) Object instantiation \u00b6 Whenever you want to work with a Java Object you must instantiate it through the $ba->java('[JAVA_FQCN]', $arg1=null, $arg2=null, ...) . Simple constructor \u00b6 <?php $ba = new \\Soluble\\Japha\\Bridge\\Adapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8083/servlet.phpjavabridge' ]); $string = $ba -> java ( 'java.lang.String' , 'Hello world' ); $hash = $ba -> java ( 'java.util.HashMap' , [ 'key1' => $string , 'key2' => 'hello' ]); Tip The [JAVA FQCN] is the fully qualified java class name (case-sensitive) optionally followed by a list of arguments (variadic notation: BridgeAdapter::java(string $javaClass, ...$args) ).* Overloaded constructor \u00b6 In case of multiple constructor signatures (PHP does not have constructor overloading) , look at : <?php $mathContext = $ba -> java ( 'java.math.MathContext' , $precision = 2 ); $bigint = $ba -> java ( 'java.math.BigInteger' , 123456 ); $bigdec = $ba -> java ( 'java.math.BigDecimal' , $bigint , $scale = 2 , $mathContext ); Tip Refer to the BigDecimal constructor to learn how it has been selected from the provided arguments. Methods \u00b6 After creating a java object with $ba->java('[JAVA_FQCN]', $arg1=null, $arg2=null, ...) you can call any public methods on it. Keep it mind that Java supports method overloading , so before calling a method, ensures parameters will match the desired method signature. For example the java.lang.String object exposes two methods for indexOf() <?php $javaString = $ba -> java ( 'java.lang.String' , 'A key is a key!' ); $index = $javaString -> indexOf ( 'key' ); // Will print 2, the selected method is `java.lang.String#indexOf(String str)` $index = $javaString -> indexOf ( 'key' , $fromIndex = 8 ); // Will print 11, the selected method is `java.lang.String#indexOf(String, $fromIndex)` Classes \u00b6 Use the $ba->javaClass('[JAVA FQCN]', $arg1=null, ...) method instead of $ba->java() ... Take a look to the following example with java.lang.System class. <?php $system = $ba -> javaClass ( 'java.lang.System' ); echo $system -> getProperties () -> get ( 'java.vm_name' ); Static methods \u00b6 Static methods are called like regular php methods (no :: ). <?php $calendar = $ba -> javaClass ( 'java.util.Calendar' ) -> getInstance (); Tip Note the use of $ba->javaClass(...) instead of $ba->java(...) to refer to the java class and call the static method on it. Remember to use it whenever you face a factory, singleton or a generic static method. Constants \u00b6 Constants on java classes are called like regular properties (no :: ). <?php // $ba = new BridgeAdapter(...); $tzClass = $ba -> javaClass ( 'java.util.TimeZone' ); echo $tz -> getDisplayName ( false , $tzClass -> SHORT ); Iterables \u00b6 Warning Iterations have a cost on performance, and looping over large sets is highly discouraged. See how you can improve speed with the values() method . You can use standard foreach , while , for ,... to loop over Java iterable objects (Map, Collection, List...). <?php // $ba = new BridgeAdapter(...); $properties = $ba -> javaClass ( 'java.lang.System' ) -> getProperties (); foreach ( $properties as $key => $value ) { echo \" $key : $value\\n \" ; } ArrayAccess \u00b6 Interfaces\\JavaObject implements ArrayAccess which allows to write maps, arrays... in a more convenient way. An example with HashMap : <?php // $ba = new BridgeAdapter(...); $hashMap = $ba -> javaClass ( 'java.util.HashMap' ); $hashMap [ 'test' ] = 'Cool' ; // equivalent to `$hashMap->put('test', 'Cool');` if ( isset ( $hashMap [ 'test' ])) { unset ( $hashMap [ 'test' ]); } Inner classes \u00b6 Java supports inner classes (classes as a class property) . To explicitly refer to an inner class, the FQCN separator must be a $ sign instead of the regular . . The following example makes use of the Calendar.Builder class: <?php // $ba = new BridgeAdapter(...); // NOTICE THE DOLLAR SIGN in 'Calendar$Builder' $builder = $ba -> java ( 'java.util.Calendar$Builder' ); echo $ba -> getClassName ( $builder ); // will print 'java.util.Calendar$Builder' $calendar = $builder -> setCalendarType ( 'gregory' ) -> build (); echo $ba -> getClassName ( $calendar ); // will print 'java.util.GregorianCalendar' Warning As PHP will interpret the $ as a variable, be sure to use single-quotes to hold the class name. Datatypes \u00b6 Scalar types \u00b6 The PHP scalar types: string , int , float and boolean can be sent as parameters to Java methods or constructors transparently: <?php $price = 12.99 ; $quantity = $ba -> java ( 'java.lang.Integer' , 10 ); $jstring = $ba -> java ( 'java.lang.String' , 'Hello world' ); Tip Be aware that Java often use object versions of scalars, like java.lang.String , java.lang.Integer , java.lang.Boolean ... In those cases, remember they generally provides methods to retrieve the scalar value. For example: <?php $quantity = $ba -> java ( 'java.lang.Integer' , 10 ); $total = $quantity -> intValue () * 12.99 ; echo sprintf ( 'Total id %.2f' , $total ); // -> 1299.00 Array types \u00b6 The PHP multi-purpose array has not equivalent in Java and you'll often use Java objects like Map, HashMap, Collection, List, Vector... instead. <?php $array = [ 'name' => 'John Doe' , 'age' => 26 ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $array ); While you can generally send the parameters as a standard php array, to get an array back you can use the fast values() method: <?php // with HashMap $input_array = [ 'name' => 'John Doe' , 'age' => 26 ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $input_array ); $output_array = $ba -> values ( $hashMap ); // $input_array === $output_array // With ArrayList $arrayList = $ba -> java ( 'java.util.ArrayList' ); $arrayList -> add ( 'Hello' ); $arrayList -> add ( 'World' ); $array = $ba -> values ( $arrayList -> toArray ()); // $array == ['Hello', 'World']; or iterate the object (ok for small sets). Testing null and booleans \u00b6 Warning Testing null and boolean: Due to internal proxying between java and php objects, 'null', 'false' and 'true' values must be tested through the bridge object. Otherwise the test is made the php proxied object and not its value. <?php // $ba = new BridgeAdapter(...); $javaBoolean = $ba -> java ( 'java.lang.Boolean' , true ); if ( $ba -> isTrue ( $javaBoolean )) { echo \"Yes, it is.\" ; } $javaBoolean = $ba -> java ( 'java.lang.Boolean' , false ); if ( ! $ba -> isTrue ( $javaBoolean )) { echo \"Yes, it is not.\" ; } if ( ! $ba -> isNull ( $rs )) { $rs -> close (); } Working with dates \u00b6 Warning Dates are not (yet) automatically casted between Java and PHP. Keep in mind that Internally the JVM works with milliseconds, PHP with to microseconds (7.1 introduced milli). Timezones might differs between runtimes. Check your configuration. As an example, the java.util.Date allows creation of dates based on a timestamp expressed in milliseconds : <?php // $ba = new BridgeAdapter(...); $phpDate = \\DateTime :: createFromFormat ( 'Y-m-d' , '2016-12-21' ); $milli = $phpDate -> format ( 'U' ) * 1000 ; // Internally the JVM handles milliseconds // In order to create a new Java date, // php dates must be converted accordingly. // The 'U' allows formatting the date as // microseconds since epoch time, just multiply // by 1000 to get milliseconds. // Alternatively you can use // $milli = strtotime('2016-12-21') * 1000; $javaDate = $ba -> java ( 'java.util.Date' , $milli ); $simpleDateFormat = $ba -> java ( \"java.text.SimpleDateFormat\" , 'yyyy-MM-dd' ); echo $simpleDateFormat -> format ( $javaDate ); // Will print: \"2016-12-21\" Alternatively you can use the java.text.SimpleDateFormatter object to parse the date string without the php conversion. <?php // $ba = new BridgeAdapter(...); $date = '2016-12-21' ; $simpleDateFormat = $ba -> java ( \"java.text.SimpleDateFormat\" , 'yyyy-MM-dd' ); $javaDate = $simpleDateFormat -> parse ( $date ); // This is a Java date echo $simpleDateFormat -> format ( $javaDate ); // Will print: \"2016-12-21\" Timezones \u00b6 Timezones might differ from PHP and the JVM runtimes. In that case, dates between PHP and Java are not guaranteed to be the same (think of 2016-12-31 23:00:00 in London and Paris) In most cases those differences can be easily fixed by ensuring both the JVM and PHP configurations use the same timezone. Another option is to pass the current timezone in the formatter : <?php $pattern = \"yyyy-MM-dd HH:mm\" ; $formatter = $ba -> java ( \"java.text.SimpleDateFormat\" , $pattern ); $tz = $ba -> javaClass ( 'java.util.TimeZone' ) -> getTimezone ( \"Europe/Paris\" ); $formatter -> setTimeZone ( $tz ); Resources \u00b6 PHP resources like pointer to a file or a network socket cannot be exchanged between runtimes. IO streams \u00b6 Warning For performance, operations on resources (like iterating over a file) is highly discouraged. They should be made on their own environment. As an example <?php $bufferedReader = $ba -> java ( 'java.io.BufferedReader' , $ba -> java ( 'java.io.FileReader' , __FILE__ ) );","title":"Language basics"},{"location":"language_basics/#language-basics","text":"Note Coding Java from PHP is relatively similar to an equivalent pure Java code. To avoid confusion while developing you must keep aware that: Java supports overloading for methods (and constructors). PHP have the multipurpose array for everything, Java does not. See here to learn more. DateTime and timezones are handled differenlty, see here to learn more. Java supports inner classes. See here And remember While array and scalar types (int, string, bool, float) are automatically casted, testing on null and booleans requires the use of $ba->isNull() and $ba->isTrue() methods. See here to learn more. PHP use the :: for static method calls and constants where Java does not . . soluble-japha brings solutions to those problems, but primary reflexes might not work (i.e. you try to call a static java method through the bridge with '::' instead of the regular '->'...)","title":"Language basics"},{"location":"language_basics/#object-instantiation","text":"Whenever you want to work with a Java Object you must instantiate it through the $ba->java('[JAVA_FQCN]', $arg1=null, $arg2=null, ...) .","title":"Object instantiation"},{"location":"language_basics/#simple-constructor","text":"<?php $ba = new \\Soluble\\Japha\\Bridge\\Adapter ([ 'driver' => 'Pjb62' , 'servlet_address' => 'localhost:8083/servlet.phpjavabridge' ]); $string = $ba -> java ( 'java.lang.String' , 'Hello world' ); $hash = $ba -> java ( 'java.util.HashMap' , [ 'key1' => $string , 'key2' => 'hello' ]); Tip The [JAVA FQCN] is the fully qualified java class name (case-sensitive) optionally followed by a list of arguments (variadic notation: BridgeAdapter::java(string $javaClass, ...$args) ).*","title":"Simple constructor"},{"location":"language_basics/#overloaded-constructor","text":"In case of multiple constructor signatures (PHP does not have constructor overloading) , look at : <?php $mathContext = $ba -> java ( 'java.math.MathContext' , $precision = 2 ); $bigint = $ba -> java ( 'java.math.BigInteger' , 123456 ); $bigdec = $ba -> java ( 'java.math.BigDecimal' , $bigint , $scale = 2 , $mathContext ); Tip Refer to the BigDecimal constructor to learn how it has been selected from the provided arguments.","title":"Overloaded constructor"},{"location":"language_basics/#methods","text":"After creating a java object with $ba->java('[JAVA_FQCN]', $arg1=null, $arg2=null, ...) you can call any public methods on it. Keep it mind that Java supports method overloading , so before calling a method, ensures parameters will match the desired method signature. For example the java.lang.String object exposes two methods for indexOf() <?php $javaString = $ba -> java ( 'java.lang.String' , 'A key is a key!' ); $index = $javaString -> indexOf ( 'key' ); // Will print 2, the selected method is `java.lang.String#indexOf(String str)` $index = $javaString -> indexOf ( 'key' , $fromIndex = 8 ); // Will print 11, the selected method is `java.lang.String#indexOf(String, $fromIndex)`","title":"Methods"},{"location":"language_basics/#classes","text":"Use the $ba->javaClass('[JAVA FQCN]', $arg1=null, ...) method instead of $ba->java() ... Take a look to the following example with java.lang.System class. <?php $system = $ba -> javaClass ( 'java.lang.System' ); echo $system -> getProperties () -> get ( 'java.vm_name' );","title":"Classes"},{"location":"language_basics/#static-methods","text":"Static methods are called like regular php methods (no :: ). <?php $calendar = $ba -> javaClass ( 'java.util.Calendar' ) -> getInstance (); Tip Note the use of $ba->javaClass(...) instead of $ba->java(...) to refer to the java class and call the static method on it. Remember to use it whenever you face a factory, singleton or a generic static method.","title":"Static methods"},{"location":"language_basics/#constants","text":"Constants on java classes are called like regular properties (no :: ). <?php // $ba = new BridgeAdapter(...); $tzClass = $ba -> javaClass ( 'java.util.TimeZone' ); echo $tz -> getDisplayName ( false , $tzClass -> SHORT );","title":"Constants"},{"location":"language_basics/#iterables","text":"Warning Iterations have a cost on performance, and looping over large sets is highly discouraged. See how you can improve speed with the values() method . You can use standard foreach , while , for ,... to loop over Java iterable objects (Map, Collection, List...). <?php // $ba = new BridgeAdapter(...); $properties = $ba -> javaClass ( 'java.lang.System' ) -> getProperties (); foreach ( $properties as $key => $value ) { echo \" $key : $value\\n \" ; }","title":"Iterables"},{"location":"language_basics/#arrayaccess","text":"Interfaces\\JavaObject implements ArrayAccess which allows to write maps, arrays... in a more convenient way. An example with HashMap : <?php // $ba = new BridgeAdapter(...); $hashMap = $ba -> javaClass ( 'java.util.HashMap' ); $hashMap [ 'test' ] = 'Cool' ; // equivalent to `$hashMap->put('test', 'Cool');` if ( isset ( $hashMap [ 'test' ])) { unset ( $hashMap [ 'test' ]); }","title":"ArrayAccess"},{"location":"language_basics/#inner-classes","text":"Java supports inner classes (classes as a class property) . To explicitly refer to an inner class, the FQCN separator must be a $ sign instead of the regular . . The following example makes use of the Calendar.Builder class: <?php // $ba = new BridgeAdapter(...); // NOTICE THE DOLLAR SIGN in 'Calendar$Builder' $builder = $ba -> java ( 'java.util.Calendar$Builder' ); echo $ba -> getClassName ( $builder ); // will print 'java.util.Calendar$Builder' $calendar = $builder -> setCalendarType ( 'gregory' ) -> build (); echo $ba -> getClassName ( $calendar ); // will print 'java.util.GregorianCalendar' Warning As PHP will interpret the $ as a variable, be sure to use single-quotes to hold the class name.","title":"Inner classes"},{"location":"language_basics/#datatypes","text":"","title":"Datatypes"},{"location":"language_basics/#scalar-types","text":"The PHP scalar types: string , int , float and boolean can be sent as parameters to Java methods or constructors transparently: <?php $price = 12.99 ; $quantity = $ba -> java ( 'java.lang.Integer' , 10 ); $jstring = $ba -> java ( 'java.lang.String' , 'Hello world' ); Tip Be aware that Java often use object versions of scalars, like java.lang.String , java.lang.Integer , java.lang.Boolean ... In those cases, remember they generally provides methods to retrieve the scalar value. For example: <?php $quantity = $ba -> java ( 'java.lang.Integer' , 10 ); $total = $quantity -> intValue () * 12.99 ; echo sprintf ( 'Total id %.2f' , $total ); // -> 1299.00","title":"Scalar types"},{"location":"language_basics/#array-types","text":"The PHP multi-purpose array has not equivalent in Java and you'll often use Java objects like Map, HashMap, Collection, List, Vector... instead. <?php $array = [ 'name' => 'John Doe' , 'age' => 26 ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $array ); While you can generally send the parameters as a standard php array, to get an array back you can use the fast values() method: <?php // with HashMap $input_array = [ 'name' => 'John Doe' , 'age' => 26 ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $input_array ); $output_array = $ba -> values ( $hashMap ); // $input_array === $output_array // With ArrayList $arrayList = $ba -> java ( 'java.util.ArrayList' ); $arrayList -> add ( 'Hello' ); $arrayList -> add ( 'World' ); $array = $ba -> values ( $arrayList -> toArray ()); // $array == ['Hello', 'World']; or iterate the object (ok for small sets).","title":"Array types"},{"location":"language_basics/#testing-null-and-booleans","text":"Warning Testing null and boolean: Due to internal proxying between java and php objects, 'null', 'false' and 'true' values must be tested through the bridge object. Otherwise the test is made the php proxied object and not its value. <?php // $ba = new BridgeAdapter(...); $javaBoolean = $ba -> java ( 'java.lang.Boolean' , true ); if ( $ba -> isTrue ( $javaBoolean )) { echo \"Yes, it is.\" ; } $javaBoolean = $ba -> java ( 'java.lang.Boolean' , false ); if ( ! $ba -> isTrue ( $javaBoolean )) { echo \"Yes, it is not.\" ; } if ( ! $ba -> isNull ( $rs )) { $rs -> close (); }","title":"Testing null and booleans"},{"location":"language_basics/#working-with-dates","text":"Warning Dates are not (yet) automatically casted between Java and PHP. Keep in mind that Internally the JVM works with milliseconds, PHP with to microseconds (7.1 introduced milli). Timezones might differs between runtimes. Check your configuration. As an example, the java.util.Date allows creation of dates based on a timestamp expressed in milliseconds : <?php // $ba = new BridgeAdapter(...); $phpDate = \\DateTime :: createFromFormat ( 'Y-m-d' , '2016-12-21' ); $milli = $phpDate -> format ( 'U' ) * 1000 ; // Internally the JVM handles milliseconds // In order to create a new Java date, // php dates must be converted accordingly. // The 'U' allows formatting the date as // microseconds since epoch time, just multiply // by 1000 to get milliseconds. // Alternatively you can use // $milli = strtotime('2016-12-21') * 1000; $javaDate = $ba -> java ( 'java.util.Date' , $milli ); $simpleDateFormat = $ba -> java ( \"java.text.SimpleDateFormat\" , 'yyyy-MM-dd' ); echo $simpleDateFormat -> format ( $javaDate ); // Will print: \"2016-12-21\" Alternatively you can use the java.text.SimpleDateFormatter object to parse the date string without the php conversion. <?php // $ba = new BridgeAdapter(...); $date = '2016-12-21' ; $simpleDateFormat = $ba -> java ( \"java.text.SimpleDateFormat\" , 'yyyy-MM-dd' ); $javaDate = $simpleDateFormat -> parse ( $date ); // This is a Java date echo $simpleDateFormat -> format ( $javaDate ); // Will print: \"2016-12-21\"","title":"Working with dates"},{"location":"language_basics/#timezones","text":"Timezones might differ from PHP and the JVM runtimes. In that case, dates between PHP and Java are not guaranteed to be the same (think of 2016-12-31 23:00:00 in London and Paris) In most cases those differences can be easily fixed by ensuring both the JVM and PHP configurations use the same timezone. Another option is to pass the current timezone in the formatter : <?php $pattern = \"yyyy-MM-dd HH:mm\" ; $formatter = $ba -> java ( \"java.text.SimpleDateFormat\" , $pattern ); $tz = $ba -> javaClass ( 'java.util.TimeZone' ) -> getTimezone ( \"Europe/Paris\" ); $formatter -> setTimeZone ( $tz );","title":"Timezones"},{"location":"language_basics/#resources","text":"PHP resources like pointer to a file or a network socket cannot be exchanged between runtimes.","title":"Resources"},{"location":"language_basics/#io-streams","text":"Warning For performance, operations on resources (like iterating over a file) is highly discouraged. They should be made on their own environment. As an example <?php $bufferedReader = $ba -> java ( 'java.io.BufferedReader' , $ba -> java ( 'java.io.FileReader' , __FILE__ ) );","title":"IO streams"},{"location":"language_exceptions/","text":"Handling Java exceptions \u00b6 Note This page document how to deal with real Java exception and not the bridge exceptions (like connection failures...). Bridge exception are documented here JavaException \u00b6 Exception thrown from the JVM will be converted to a generic JavaException class (Soluble\\Japha\\Bridge\\Exception\\JavaException) that can be catched like a regular PHP one. To retrieve specific information from the Java/JVM exception, you can use the following methods: JavaException::getClassName() will give you the originating Java exception class name. For example: java.lang.java.lang.NoSuchMethodException, ... JavaException::getStackTrace() will give you the JVM stacktrace. Tip From version 2.4.0, JavaExceptions are logged. See how to inject a PSR-3 logger in the bridge_connection section <?php use Soluble\\Japha\\Bridge\\Exception ; //... try { $javaObject = $ba -> java ( 'my.imaginary.JavaObject' ); $javaObject -> methodThatThrowsAndException (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage (); echo $e -> getJavaClassName (); echo $e -> getStackTrace (); } Extended exceptions \u00b6 For convenience the following exceptions extends the base JavaException class and can be useful while developping. ClassNotFoundException \u00b6 The Soluble\\Japha\\Bridge\\Exception\\ClassNotFoundException is a convenient exception class thrown whenever a Java class is not found: <?php use Soluble\\Japha\\Bridge\\Exception ; try { $string = $ba -> java ( 'java.INVALID.FQCN' , \"Hello world\" ); } catch ( Exception\\ClassNotFoundException $e ) { echo $e -> getMessage (); // -> \"java.lang.ClassNotFoundException\" echo $e -> getJavaClassName (); echo $e -> getStackTrace (); } NoSuchMethodException \u00b6 The Soluble\\Japha\\Bridge\\Exception\\NoSuchMethodException is a convenient exception class thrown whenever a method does not exists on an object <?php use Soluble\\Japha\\Bridge\\Exception ; // Invalid method try { $string = $ba -> java ( 'java.lang.String' , \"Hello world\" ); $string -> anInvalidMethod (); } catch ( Exception\\NoSuchMethodException $e ) { echo $e -> getJavaClassName (); // -> \"java.lang.NoSuchMethodException\" echo $e -> getMessage (); // -> Invoke failed: [[o:String]]->anInvalidMethod. Cause: java.lang.NoSuchMethodException: anInvalidMethod()... echo $e -> getCause (); // -> java.lang.NoSuchMethodException: anInvalidMethod()... echo $e -> getStackTrace (); } NoSuchFieldException \u00b6 The Soluble\\Japha\\Bridge\\Exception\\NoSuchFieldException is a convenient exception class thrown whenever a property does not exists on an object <?php use Soluble\\Japha\\Bridge\\Exception ; // Invalid method try { $string = $ba -> java ( 'java.lang.String' , \"Hello world\" ); $string -> fieldNotExists = 10 ; } catch ( Exception\\NoSuchFieldException $e ) { //... } BrokenConnectionException \u00b6 The Soluble\\Japha\\Bridge\\Exception\\BrokenConnectionException is thrown whenever there's a communication failure with the bridge (closed unexpectedly, server down in middle of transaction...). This exception might happen in very rare circumstances. Be sure to enable the logger at connection to keep track on this. Tip If the BrokenConnectionException happens just after the connection, chances are that you are not connecting to the bridge but to another service. Please check notes here .","title":"Handling exceptions"},{"location":"language_exceptions/#handling-java-exceptions","text":"Note This page document how to deal with real Java exception and not the bridge exceptions (like connection failures...). Bridge exception are documented here","title":"Handling Java exceptions"},{"location":"language_exceptions/#javaexception","text":"Exception thrown from the JVM will be converted to a generic JavaException class (Soluble\\Japha\\Bridge\\Exception\\JavaException) that can be catched like a regular PHP one. To retrieve specific information from the Java/JVM exception, you can use the following methods: JavaException::getClassName() will give you the originating Java exception class name. For example: java.lang.java.lang.NoSuchMethodException, ... JavaException::getStackTrace() will give you the JVM stacktrace. Tip From version 2.4.0, JavaExceptions are logged. See how to inject a PSR-3 logger in the bridge_connection section <?php use Soluble\\Japha\\Bridge\\Exception ; //... try { $javaObject = $ba -> java ( 'my.imaginary.JavaObject' ); $javaObject -> methodThatThrowsAndException (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage (); echo $e -> getJavaClassName (); echo $e -> getStackTrace (); }","title":"JavaException"},{"location":"language_exceptions/#extended-exceptions","text":"For convenience the following exceptions extends the base JavaException class and can be useful while developping.","title":"Extended exceptions"},{"location":"language_exceptions/#classnotfoundexception","text":"The Soluble\\Japha\\Bridge\\Exception\\ClassNotFoundException is a convenient exception class thrown whenever a Java class is not found: <?php use Soluble\\Japha\\Bridge\\Exception ; try { $string = $ba -> java ( 'java.INVALID.FQCN' , \"Hello world\" ); } catch ( Exception\\ClassNotFoundException $e ) { echo $e -> getMessage (); // -> \"java.lang.ClassNotFoundException\" echo $e -> getJavaClassName (); echo $e -> getStackTrace (); }","title":"ClassNotFoundException"},{"location":"language_exceptions/#nosuchmethodexception","text":"The Soluble\\Japha\\Bridge\\Exception\\NoSuchMethodException is a convenient exception class thrown whenever a method does not exists on an object <?php use Soluble\\Japha\\Bridge\\Exception ; // Invalid method try { $string = $ba -> java ( 'java.lang.String' , \"Hello world\" ); $string -> anInvalidMethod (); } catch ( Exception\\NoSuchMethodException $e ) { echo $e -> getJavaClassName (); // -> \"java.lang.NoSuchMethodException\" echo $e -> getMessage (); // -> Invoke failed: [[o:String]]->anInvalidMethod. Cause: java.lang.NoSuchMethodException: anInvalidMethod()... echo $e -> getCause (); // -> java.lang.NoSuchMethodException: anInvalidMethod()... echo $e -> getStackTrace (); }","title":"NoSuchMethodException"},{"location":"language_exceptions/#nosuchfieldexception","text":"The Soluble\\Japha\\Bridge\\Exception\\NoSuchFieldException is a convenient exception class thrown whenever a property does not exists on an object <?php use Soluble\\Japha\\Bridge\\Exception ; // Invalid method try { $string = $ba -> java ( 'java.lang.String' , \"Hello world\" ); $string -> fieldNotExists = 10 ; } catch ( Exception\\NoSuchFieldException $e ) { //... }","title":"NoSuchFieldException"},{"location":"language_exceptions/#brokenconnectionexception","text":"The Soluble\\Japha\\Bridge\\Exception\\BrokenConnectionException is thrown whenever there's a communication failure with the bridge (closed unexpectedly, server down in middle of transaction...). This exception might happen in very rare circumstances. Be sure to enable the logger at connection to keep track on this. Tip If the BrokenConnectionException happens just after the connection, chances are that you are not connecting to the bridge but to another service. Please check notes here .","title":"BrokenConnectionException"},{"location":"language_optimizations/","text":"Optimization techniques \u00b6 Note Be sure to have read the how it works and benchmark pages to understand the reasons behind the proposed optimization techniques. Values method \u00b6 Iterating over Java arrays (HashMap, ArrayList, Vector...) to retrieves their values in a PHP loop (while, foreach...) produce a lot of roundtrips with the bridge that can lead to poor performance. Instead, you can use the values() method to retrieve the values in one run: HashMap example \u00b6 <?php $arrOfArray = [ 'real' => true , 'what' => 'Too early to know' , 'count' => 2017 , 'arr10000' => array_fill ( 0 , 10000 , 'Hello world' ) ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $arrOfArray ); $arrFromJava = $ba -> values ( $hashMap ); // $arrOfArray is identical from $arrFromJava (one roundtrip) Vector example \u00b6 <?php $array = array_fill ( 0 , 1000 , 'Hello' ); $vector = $ba -> java ( 'java.util.Vector' , $array ); $values = $ba -> values ( $vector ); // $values === $array Optimizing loops \u00b6 One of many techniques to solve loop/iterations issues (increase rountrips) is to build an ArrayList, Linked list on the Java side instead of iterating from the PHP side. WIP: see the JDBCPerformanceTest . Java serialization \u00b6 Whenever you need to retrieve a complex object structure (deep nesting...), you can use object serialization on the backend. See the recipes for json serialization as an example.","title":"Optimizations"},{"location":"language_optimizations/#optimization-techniques","text":"Note Be sure to have read the how it works and benchmark pages to understand the reasons behind the proposed optimization techniques.","title":"Optimization techniques"},{"location":"language_optimizations/#values-method","text":"Iterating over Java arrays (HashMap, ArrayList, Vector...) to retrieves their values in a PHP loop (while, foreach...) produce a lot of roundtrips with the bridge that can lead to poor performance. Instead, you can use the values() method to retrieve the values in one run:","title":"Values method"},{"location":"language_optimizations/#hashmap-example","text":"<?php $arrOfArray = [ 'real' => true , 'what' => 'Too early to know' , 'count' => 2017 , 'arr10000' => array_fill ( 0 , 10000 , 'Hello world' ) ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $arrOfArray ); $arrFromJava = $ba -> values ( $hashMap ); // $arrOfArray is identical from $arrFromJava (one roundtrip)","title":"HashMap example"},{"location":"language_optimizations/#vector-example","text":"<?php $array = array_fill ( 0 , 1000 , 'Hello' ); $vector = $ba -> java ( 'java.util.Vector' , $array ); $values = $ba -> values ( $vector ); // $values === $array","title":"Vector example"},{"location":"language_optimizations/#optimizing-loops","text":"One of many techniques to solve loop/iterations issues (increase rountrips) is to build an ArrayList, Linked list on the Java side instead of iterating from the PHP side. WIP: see the JDBCPerformanceTest .","title":"Optimizing loops"},{"location":"language_optimizations/#java-serialization","text":"Whenever you need to retrieve a complex object structure (deep nesting...), you can use object serialization on the backend. See the recipes for json serialization as an example.","title":"Java serialization"},{"location":"language_recipes/","text":"Recipes \u00b6 Warning For learning purposes, the bridge optimizations techniques might not have been applied to the recipe examples. That way, most examples will better correspond to their equivalent Java syntax, they should be optimized for best performance. Learn more in the language optimization section. Third party \u00b6 The following examples are based on third-party Java libraries. Tip When using third party libraries, always check their license. Their installation can be done easily added when building your own Javabridge server. (pre-made init-scripts are available here ). CoreNLP \u00b6 Example based on the http://stanfordnlp.github.io/CoreNLP/simple.html . <?php declare ( strict_types = 1 ); function getSentences ( Adapter $ba , string $text ) : array { $doc = $ba -> java ( 'edu.stanford.nlp.simple.Document' , $text ); $sentences = $doc -> sentences (); $d = $ba -> getDriver (); $results = []; foreach ( $sentences as $idx => $sentence ) { $results [ $idx ] = [ 'sentence' => ( string ) $sentence , 'words' => $d -> values ( $sentence -> words ()), // If you have a model installed you can // use lemmas(), posTags(), parse()... methods 'lemmas' => $d -> values ( $sentence -> lemmas ()), 'posTags' => $d -> values ( $sentence -> posTags ()), 'parse' => $d -> values ( $sentence -> parse ()) ]; } return $results ; } $text = \"add your text here! It can contain multiple sentences. Hello world.\" ; $results = getSentences ( $ba , $text ); assertEquals ( 'add your text here!' , $results [ 0 ][ 'sentence' ]); assertEquals ( 'Hello world.' , $results [ 2 ][ 'sentence' ]); assertEquals ( 'Hello' , $results [ 2 ][ 'words' ][ 0 ]); Tip While the bridge might offer more flexibility, CoreNLP provides a rest server that should be considered first for integration with PHP. JasperReport \u00b6 Basic example with jasper reports: <?php // Variables $reportFile = '/path/10_report_test_json_northwind.jrxml' ; $jsonDataFile = '/path/northwind.json' ; $outputFile = '/path/output.pdf' ; // -------------------------------------------------------------------------------------- // STEP 1 - compile report // -------------------------------------------------------------------------------------- $compileManager = $ba -> javaClass ( 'net.sf.jasperreports.engine.JasperCompileManager' ); $jasperPrint = $compileManager -> compileReport ( $reportFile ); // --------------------------------------------------------------------------------------- // STEP 2 - getting fileResolver and classLoader // --------------------------------------------------------------------------------------- $reportPath = $ba -> java ( 'java.io.File' , dirname ( $reportFile )); $fileResolver = $ba -> java ( 'net.sf.jasperreports.engine.util.SimpleFileResolver' , [ $reportPath ]); $fileResolver -> setResolveAbsolutePath ( true ); $classLoader = $ba -> java ( 'java.net.URLClassLoader' , [ $reportPath -> toUrl ()]); // --------------------------------------------------------------------------------------- // STEP 3 - setting context props // --------------------------------------------------------------------------------------- $props = [ //'net.sf.jasperreports.json.source' => $jsonDataFile, 'net.sf.jasperreports.json.source' => $ba -> java ( 'java.io.File' , $jsonDataFile ) -> getAbsolutePath (), 'net.sf.jasperreports.json.date.pattern' => 'yyyy-MM-dd' , 'net.sf.jasperreports.json.number.pattern' => '#,##0.##' , 'net.sf.jasperreports.json.locale.code' => 'en_GB' , 'net.sf.jasperreports.json.timezone.id' => 'Europe/Brussels' , 'REPORT_FILE_RESOLVER' => $fileResolver , 'REPORT_CLASS_LOADER' => $classLoader ]; // ------------------------------------------------------------------------------------ // Step 4: filling report // ------------------------------------------------------------------------------------ $fillManager = $ba -> javaClass ( 'net.sf.jasperreports.engine.JasperFillManager' ); $params = array_merge ( $props , [ 'REPORT_LOGO' => './assets/wave.png' , 'REPORT_TITLE' => 'Test' ]); $jasperPrint = $fillManager -> fillReport ( $jasperPrint , $ba -> java ( 'java.util.HashMap' , $params ) ); // ----------------------------------------------------------------------------------- // Step 5: Exporting report in pdf // ----------------------------------------------------------------------------------- $exportManager = $this -> ba -> javaClass ( 'net.sf.jasperreports.engine.JasperExportManager' ); $exportManager -> exportReportToPdfFile ( $jasperPrint , $outputFile ); Tip Don't forget to look at the ready to use wrapper soluble-jasper based on the bridge. Json \u00b6 Json serialization can be particularly useful whenever you want to retrieve a java object representation. It could be used as an optimization technique as well. Gson \u00b6 Gson is a fast and simple json serializer from google. <?php //... $gson = $ba -> java ( 'com.google.gson.Gson' ); $simpleDateFormat = $ba -> java ( 'java.text.SimpleDateFormat' , 'yyyy-MM-dd' ); $hashMap = $ba -> java ( 'java.util.HashMap' , [ 'integer' => 1 , 'phpstring' => 'PHP H\u00e9llo' , 'javastring' => $ba -> java ( 'java.lang.String' , 'Java H\u00e9llo' ), 'javadate' => $simpleDateFormat -> parse ( '2017-05-20' ) ]); $jsonString = ( string ) $gson -> toJson ( $hashMap ); // Will produce: // { // \"javastring\":\"Java H\u00e9llo\", // \"javadate\":\"May 20, 2017 12:00:00 AM\", // \"phpstring\":\"PHP H\u00e9llo\", // \"integer\":1 // } $decoded = json_decode ( $jsonString ); // assertEquals('Java H\u00e9llo', $decoded->javastring); Json-io \u00b6 Json-io is another serializer. <?php //... $jsonWriter = $ba -> javaClass ( 'com.cedarsoftware.util.io.JsonWriter' ); $simpleDateFormat = $ba -> java ( 'java.text.SimpleDateFormat' , 'yyyy-MM-dd' ); $hashMap = $ba -> java ( 'java.util.HashMap' , [ 'integer' => 1 , 'phpstring' => 'PHP H\u00e9llo' , 'javastring' => $ba -> java ( 'java.lang.String' , 'Java H\u00e9llo' ), 'javadate' => $simpleDateFormat -> parse ( '2017-05-20' ) ]); $jsonString = ( string ) $jsonWriter -> objectToJson ( $hashMap ); // Will produce // { // \"@type\":\"java.util.HashMap\", // \"javastring\":\"Java H\u00e9llo\", // \"javadate\": { // \"@type\":\"date\", // \"value\":1495231200000 // }, // \"phpstring\":\"PHP H\u00e9llo\", // \"integer\": { // \"@type\":\"int\", // \"value\":1 // } // } $decoded = json_decode ( $jsonString ); // assertEquals('date', $decoded->javadate->{'@type'}); // assertEquals('Java H\u00e9llo', $decoded->javastring); JDBC example \u00b6 Demonstrate the usage of JDBC as it still is a very popular example in Java. Warning Iterating over probable large resultsets with the bridge as illustrated on the JDBC example is very expensive in terms of performance. This code should not be used with the bridge unless no other option exists. See the performance and best practices to learn why. <?php use Soluble\\Japha\\Bridge\\Exception ; // $ba = new BridgeAdapter(...); $driverClass = 'com.mysql.jdbc.Driver' ; $dsn = \"jdbc:mysql://localhost/my_database?user=login&password=pwd\" ; try { $driverManager = $ba -> javaClass ( 'java.sql.DriverManager' ); $class = $ba -> javaClass ( 'java.lang.Class' ); $class -> forName ( $driverClass ); $conn = $driverManager -> getConnection ( $dsn ); } catch ( Exception\\ClassNotFoundException $e ) { // Probably the jdbc driver is not registered // on the JVM side. Check that the mysql-connector.jar // is installed echo $e -> getMessage (); echo $e -> getStackTrace (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage (); echo $e -> getStackTrace (); } try { $stmt = $conn -> createStatement (); $rs = $stmt -> executeQuery ( 'select * from product' ); while ( $rs -> next ()) { $title = $rs -> getString ( \"title\" ); echo $title ; } if ( ! $ba -> isNull ( $rs )) { $rs -> close (); } if ( ! $ba -> isNull ( $stmt )) { $stmt -> close (); } $conn -> close (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage (); // Because it's a JavaException // you can use the java stack trace echo $e -> getStackTrace (); } catch ( \\Exception $e ) { echo $e -> getMessage (); } Tip You can easily add MySQL connector to your bridge server, pre-made build scripts are available here . Standard runtime \u00b6 Those examples can be tested on a standard JVM install (no third party requirements). SSL sockets \u00b6 Demonstrate some possible uses of streams (code is irrelevant from a PHP point of view) . <?php // $ba = new BridgeAdapter(...); $serverPort = 443 ; $host = 'www.google.com' ; $socketFactory = $ba -> javaClass ( 'javax.net.ssl.SSLSocketFactory' ) -> getDefault (); $socket = $socketFactory -> createSocket ( $host , $serverPort ); $socket -> startHandshake (); $bufferedWriter = $ba -> java ( 'java.io.BufferedWriter' , $ba -> java ( 'java.io.OutputStreamWriter' , $socket -> getOutputStream () ) ); $bufferedReader = $ba -> java ( 'java.io.BufferedReader' , $ba -> java ( 'java.io.InputStreamReader' , $socket -> getInputStream () ) ); $bufferedWriter -> write ( \"GET / HTTP/1.0\" ); $bufferedWriter -> newLine (); $bufferedWriter -> newLine (); // end of HTTP request $bufferedWriter -> flush (); $lines = []; do { $line = $bufferedReader -> readLine (); $lines [] = ( string ) $line ; } while ( ! $ba -> isNull ( $line )); $content = implode ( \" \\n \" , $lines ); echo $content ; $bufferedWriter -> close (); $bufferedReader -> close (); $socket -> close ();","title":"Recipes"},{"location":"language_recipes/#recipes","text":"Warning For learning purposes, the bridge optimizations techniques might not have been applied to the recipe examples. That way, most examples will better correspond to their equivalent Java syntax, they should be optimized for best performance. Learn more in the language optimization section.","title":"Recipes"},{"location":"language_recipes/#third-party","text":"The following examples are based on third-party Java libraries. Tip When using third party libraries, always check their license. Their installation can be done easily added when building your own Javabridge server. (pre-made init-scripts are available here ).","title":"Third party"},{"location":"language_recipes/#corenlp","text":"Example based on the http://stanfordnlp.github.io/CoreNLP/simple.html . <?php declare ( strict_types = 1 ); function getSentences ( Adapter $ba , string $text ) : array { $doc = $ba -> java ( 'edu.stanford.nlp.simple.Document' , $text ); $sentences = $doc -> sentences (); $d = $ba -> getDriver (); $results = []; foreach ( $sentences as $idx => $sentence ) { $results [ $idx ] = [ 'sentence' => ( string ) $sentence , 'words' => $d -> values ( $sentence -> words ()), // If you have a model installed you can // use lemmas(), posTags(), parse()... methods 'lemmas' => $d -> values ( $sentence -> lemmas ()), 'posTags' => $d -> values ( $sentence -> posTags ()), 'parse' => $d -> values ( $sentence -> parse ()) ]; } return $results ; } $text = \"add your text here! It can contain multiple sentences. Hello world.\" ; $results = getSentences ( $ba , $text ); assertEquals ( 'add your text here!' , $results [ 0 ][ 'sentence' ]); assertEquals ( 'Hello world.' , $results [ 2 ][ 'sentence' ]); assertEquals ( 'Hello' , $results [ 2 ][ 'words' ][ 0 ]); Tip While the bridge might offer more flexibility, CoreNLP provides a rest server that should be considered first for integration with PHP.","title":"CoreNLP"},{"location":"language_recipes/#jasperreport","text":"Basic example with jasper reports: <?php // Variables $reportFile = '/path/10_report_test_json_northwind.jrxml' ; $jsonDataFile = '/path/northwind.json' ; $outputFile = '/path/output.pdf' ; // -------------------------------------------------------------------------------------- // STEP 1 - compile report // -------------------------------------------------------------------------------------- $compileManager = $ba -> javaClass ( 'net.sf.jasperreports.engine.JasperCompileManager' ); $jasperPrint = $compileManager -> compileReport ( $reportFile ); // --------------------------------------------------------------------------------------- // STEP 2 - getting fileResolver and classLoader // --------------------------------------------------------------------------------------- $reportPath = $ba -> java ( 'java.io.File' , dirname ( $reportFile )); $fileResolver = $ba -> java ( 'net.sf.jasperreports.engine.util.SimpleFileResolver' , [ $reportPath ]); $fileResolver -> setResolveAbsolutePath ( true ); $classLoader = $ba -> java ( 'java.net.URLClassLoader' , [ $reportPath -> toUrl ()]); // --------------------------------------------------------------------------------------- // STEP 3 - setting context props // --------------------------------------------------------------------------------------- $props = [ //'net.sf.jasperreports.json.source' => $jsonDataFile, 'net.sf.jasperreports.json.source' => $ba -> java ( 'java.io.File' , $jsonDataFile ) -> getAbsolutePath (), 'net.sf.jasperreports.json.date.pattern' => 'yyyy-MM-dd' , 'net.sf.jasperreports.json.number.pattern' => '#,##0.##' , 'net.sf.jasperreports.json.locale.code' => 'en_GB' , 'net.sf.jasperreports.json.timezone.id' => 'Europe/Brussels' , 'REPORT_FILE_RESOLVER' => $fileResolver , 'REPORT_CLASS_LOADER' => $classLoader ]; // ------------------------------------------------------------------------------------ // Step 4: filling report // ------------------------------------------------------------------------------------ $fillManager = $ba -> javaClass ( 'net.sf.jasperreports.engine.JasperFillManager' ); $params = array_merge ( $props , [ 'REPORT_LOGO' => './assets/wave.png' , 'REPORT_TITLE' => 'Test' ]); $jasperPrint = $fillManager -> fillReport ( $jasperPrint , $ba -> java ( 'java.util.HashMap' , $params ) ); // ----------------------------------------------------------------------------------- // Step 5: Exporting report in pdf // ----------------------------------------------------------------------------------- $exportManager = $this -> ba -> javaClass ( 'net.sf.jasperreports.engine.JasperExportManager' ); $exportManager -> exportReportToPdfFile ( $jasperPrint , $outputFile ); Tip Don't forget to look at the ready to use wrapper soluble-jasper based on the bridge.","title":"JasperReport"},{"location":"language_recipes/#json","text":"Json serialization can be particularly useful whenever you want to retrieve a java object representation. It could be used as an optimization technique as well.","title":"Json"},{"location":"language_recipes/#gson","text":"Gson is a fast and simple json serializer from google. <?php //... $gson = $ba -> java ( 'com.google.gson.Gson' ); $simpleDateFormat = $ba -> java ( 'java.text.SimpleDateFormat' , 'yyyy-MM-dd' ); $hashMap = $ba -> java ( 'java.util.HashMap' , [ 'integer' => 1 , 'phpstring' => 'PHP H\u00e9llo' , 'javastring' => $ba -> java ( 'java.lang.String' , 'Java H\u00e9llo' ), 'javadate' => $simpleDateFormat -> parse ( '2017-05-20' ) ]); $jsonString = ( string ) $gson -> toJson ( $hashMap ); // Will produce: // { // \"javastring\":\"Java H\u00e9llo\", // \"javadate\":\"May 20, 2017 12:00:00 AM\", // \"phpstring\":\"PHP H\u00e9llo\", // \"integer\":1 // } $decoded = json_decode ( $jsonString ); // assertEquals('Java H\u00e9llo', $decoded->javastring);","title":"Gson"},{"location":"language_recipes/#json-io","text":"Json-io is another serializer. <?php //... $jsonWriter = $ba -> javaClass ( 'com.cedarsoftware.util.io.JsonWriter' ); $simpleDateFormat = $ba -> java ( 'java.text.SimpleDateFormat' , 'yyyy-MM-dd' ); $hashMap = $ba -> java ( 'java.util.HashMap' , [ 'integer' => 1 , 'phpstring' => 'PHP H\u00e9llo' , 'javastring' => $ba -> java ( 'java.lang.String' , 'Java H\u00e9llo' ), 'javadate' => $simpleDateFormat -> parse ( '2017-05-20' ) ]); $jsonString = ( string ) $jsonWriter -> objectToJson ( $hashMap ); // Will produce // { // \"@type\":\"java.util.HashMap\", // \"javastring\":\"Java H\u00e9llo\", // \"javadate\": { // \"@type\":\"date\", // \"value\":1495231200000 // }, // \"phpstring\":\"PHP H\u00e9llo\", // \"integer\": { // \"@type\":\"int\", // \"value\":1 // } // } $decoded = json_decode ( $jsonString ); // assertEquals('date', $decoded->javadate->{'@type'}); // assertEquals('Java H\u00e9llo', $decoded->javastring);","title":"Json-io"},{"location":"language_recipes/#jdbc-example","text":"Demonstrate the usage of JDBC as it still is a very popular example in Java. Warning Iterating over probable large resultsets with the bridge as illustrated on the JDBC example is very expensive in terms of performance. This code should not be used with the bridge unless no other option exists. See the performance and best practices to learn why. <?php use Soluble\\Japha\\Bridge\\Exception ; // $ba = new BridgeAdapter(...); $driverClass = 'com.mysql.jdbc.Driver' ; $dsn = \"jdbc:mysql://localhost/my_database?user=login&password=pwd\" ; try { $driverManager = $ba -> javaClass ( 'java.sql.DriverManager' ); $class = $ba -> javaClass ( 'java.lang.Class' ); $class -> forName ( $driverClass ); $conn = $driverManager -> getConnection ( $dsn ); } catch ( Exception\\ClassNotFoundException $e ) { // Probably the jdbc driver is not registered // on the JVM side. Check that the mysql-connector.jar // is installed echo $e -> getMessage (); echo $e -> getStackTrace (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage (); echo $e -> getStackTrace (); } try { $stmt = $conn -> createStatement (); $rs = $stmt -> executeQuery ( 'select * from product' ); while ( $rs -> next ()) { $title = $rs -> getString ( \"title\" ); echo $title ; } if ( ! $ba -> isNull ( $rs )) { $rs -> close (); } if ( ! $ba -> isNull ( $stmt )) { $stmt -> close (); } $conn -> close (); } catch ( Exception\\JavaException $e ) { echo $e -> getMessage (); // Because it's a JavaException // you can use the java stack trace echo $e -> getStackTrace (); } catch ( \\Exception $e ) { echo $e -> getMessage (); } Tip You can easily add MySQL connector to your bridge server, pre-made build scripts are available here .","title":"JDBC example"},{"location":"language_recipes/#standard-runtime","text":"Those examples can be tested on a standard JVM install (no third party requirements).","title":"Standard runtime"},{"location":"language_recipes/#ssl-sockets","text":"Demonstrate some possible uses of streams (code is irrelevant from a PHP point of view) . <?php // $ba = new BridgeAdapter(...); $serverPort = 443 ; $host = 'www.google.com' ; $socketFactory = $ba -> javaClass ( 'javax.net.ssl.SSLSocketFactory' ) -> getDefault (); $socket = $socketFactory -> createSocket ( $host , $serverPort ); $socket -> startHandshake (); $bufferedWriter = $ba -> java ( 'java.io.BufferedWriter' , $ba -> java ( 'java.io.OutputStreamWriter' , $socket -> getOutputStream () ) ); $bufferedReader = $ba -> java ( 'java.io.BufferedReader' , $ba -> java ( 'java.io.InputStreamReader' , $socket -> getInputStream () ) ); $bufferedWriter -> write ( \"GET / HTTP/1.0\" ); $bufferedWriter -> newLine (); $bufferedWriter -> newLine (); // end of HTTP request $bufferedWriter -> flush (); $lines = []; do { $line = $bufferedReader -> readLine (); $lines [] = ( string ) $line ; } while ( ! $ba -> isNull ( $line )); $content = implode ( \" \\n \" , $lines ); echo $content ; $bufferedWriter -> close (); $bufferedReader -> close (); $socket -> close ();","title":"SSL sockets"},{"location":"language_useful_functions/","text":"Useful functions \u00b6 Type related \u00b6 Java classname \u00b6 To get the fully qualified java class name on an object, simply call: <?php $javaString = $ba -> java ( 'java.lang.String' , 'Hello World' ); $javaFQCN = $ba -> getClassName ( $javaString ); // will print 'java.lang.String' InstanceOf \u00b6 To check whether a Java object is an instance of another: <?php $string = $ba -> java ( 'java.lang.String' , 'Hello' ); $true = $ba -> isInstanceOf ( $string , 'java.lang.String' ); $true = $ba -> isInstanceOf ( $string , 'java.lang.Object' ); $false = $ba -> isInstanceOf ( $string , 'java.util.HashMap' ); // With JavaClass $system = $ba -> javaClass ( 'java.lang.System' ); $false = $ba -> isInstanceOf ( $string , $system ); Performance related \u00b6 Values method \u00b6 Iterating over Java arrays (HashMap, ArrayList, Vector...) to retrieves their values in a PHP loop (while, foreach...) produce a lot of roundtrips with the bridge that can lead to poor performance. Instead, you can use the values() method to retrieve the values in one run: Vector example \u00b6 <?php $array = array_fill ( 0 , 1000 , 'Hello' ); $vector = $ba -> java ( 'java.util.Vector' , $array ); $values = $ba -> values ( $vector ); // $values === $array HashMap example \u00b6 <?php $arrOfArray = [ 'real' => true , 'what' => 'Too early to know' , 'count' => 2017 , 'arr10000' => array_fill ( 0 , 10000 , 'Hello world' ) ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $arrOfArray ); $arrFromJava = $ba -> values ( $hashMap ); // $arrOfArray is identical from $arrFromJava (one roundtrip) Driver operations \u00b6 Note Advanced operations are handled though the DriverInterface object, you can retrieve the Driver from the Adapter: <?php $driver = $this -> adapter -> getDriver (); Inspect a JavaObject \u00b6 To inspect the content of a Java object, you can call the inspect method on the Driver: <?php $javaString = $ba -> java ( 'java.lang.String' , 'Hello World' ); echo $ba -> getDriver () -> inspect ( $javaString ); // will print // [class java.lang.String: // Constructors: // public java.lang.String(byte[],int,int) // public java.lang.String(byte[],java.nio.charset.Charset) // public java.lang.String(byte[],java.lang.String) throws java.io.UnsupportedEncodingException // public java.lang.String(byte[],int,int,java.nio.charset.Charset) // ... Dynamic method invocation \u00b6 For dynamic calls, the DriverInterface::invoke() method can be used on JavaObject or JavaClass objects: <?php $javaString = $ba -> java ( 'java.lang.String' , 'A key is a key!' ); $length = $ba -> getDriver () -> invoke ( $javaString , 'length' ); $index = $ba -> getDriver () -> invoke ( $javaString , 'indexOf' , [ 'key' ]); $index = $ba -> getDriver () -> invoke ( $javaString , 'indexOf' , [ 'key' , $fromIndex = 8 ]); Note Be aware that the arguments have to be send as an array which differs from a standard method call, compare it to $javaString->indexOf('key', $fromIndex=8) . for an example.","title":"Useful functions"},{"location":"language_useful_functions/#useful-functions","text":"","title":"Useful functions"},{"location":"language_useful_functions/#type-related","text":"","title":"Type related"},{"location":"language_useful_functions/#java-classname","text":"To get the fully qualified java class name on an object, simply call: <?php $javaString = $ba -> java ( 'java.lang.String' , 'Hello World' ); $javaFQCN = $ba -> getClassName ( $javaString ); // will print 'java.lang.String'","title":"Java classname"},{"location":"language_useful_functions/#instanceof","text":"To check whether a Java object is an instance of another: <?php $string = $ba -> java ( 'java.lang.String' , 'Hello' ); $true = $ba -> isInstanceOf ( $string , 'java.lang.String' ); $true = $ba -> isInstanceOf ( $string , 'java.lang.Object' ); $false = $ba -> isInstanceOf ( $string , 'java.util.HashMap' ); // With JavaClass $system = $ba -> javaClass ( 'java.lang.System' ); $false = $ba -> isInstanceOf ( $string , $system );","title":"InstanceOf"},{"location":"language_useful_functions/#performance-related","text":"","title":"Performance related"},{"location":"language_useful_functions/#values-method","text":"Iterating over Java arrays (HashMap, ArrayList, Vector...) to retrieves their values in a PHP loop (while, foreach...) produce a lot of roundtrips with the bridge that can lead to poor performance. Instead, you can use the values() method to retrieve the values in one run:","title":"Values method"},{"location":"language_useful_functions/#vector-example","text":"<?php $array = array_fill ( 0 , 1000 , 'Hello' ); $vector = $ba -> java ( 'java.util.Vector' , $array ); $values = $ba -> values ( $vector ); // $values === $array","title":"Vector example"},{"location":"language_useful_functions/#hashmap-example","text":"<?php $arrOfArray = [ 'real' => true , 'what' => 'Too early to know' , 'count' => 2017 , 'arr10000' => array_fill ( 0 , 10000 , 'Hello world' ) ]; $hashMap = $ba -> java ( 'java.util.HashMap' , $arrOfArray ); $arrFromJava = $ba -> values ( $hashMap ); // $arrOfArray is identical from $arrFromJava (one roundtrip)","title":"HashMap example"},{"location":"language_useful_functions/#driver-operations","text":"Note Advanced operations are handled though the DriverInterface object, you can retrieve the Driver from the Adapter: <?php $driver = $this -> adapter -> getDriver ();","title":"Driver operations"},{"location":"language_useful_functions/#inspect-a-javaobject","text":"To inspect the content of a Java object, you can call the inspect method on the Driver: <?php $javaString = $ba -> java ( 'java.lang.String' , 'Hello World' ); echo $ba -> getDriver () -> inspect ( $javaString ); // will print // [class java.lang.String: // Constructors: // public java.lang.String(byte[],int,int) // public java.lang.String(byte[],java.nio.charset.Charset) // public java.lang.String(byte[],java.lang.String) throws java.io.UnsupportedEncodingException // public java.lang.String(byte[],int,int,java.nio.charset.Charset) // ...","title":"Inspect a JavaObject"},{"location":"language_useful_functions/#dynamic-method-invocation","text":"For dynamic calls, the DriverInterface::invoke() method can be used on JavaObject or JavaClass objects: <?php $javaString = $ba -> java ( 'java.lang.String' , 'A key is a key!' ); $length = $ba -> getDriver () -> invoke ( $javaString , 'length' ); $index = $ba -> getDriver () -> invoke ( $javaString , 'indexOf' , [ 'key' ]); $index = $ba -> getDriver () -> invoke ( $javaString , 'indexOf' , [ 'key' , $fromIndex = 8 ]); Note Be aware that the arguments have to be send as an array which differs from a standard method call, compare it to $javaString->indexOf('key', $fromIndex=8) . for an example.","title":"Dynamic method invocation"},{"location":"notes_implementation/","text":"Implementation notes \u00b6 Status \u00b6 Client API can be considered stable. Quality \u00b6 At time of writing this document (Feb 17), version 1.0.0 passes 83 unit tests with 762 assertions for a coverage of 60%. Note The low degree of coverage is mainly due to a lot of obsolete code in the pjb driver code that is still to be removed. Code standards \u00b6 PSR 4 Autoloader PSR 3 Logger interface PSR 2 Coding Style Guide PSR 1 Coding Standards Changelog \u00b6 This project adheres to semantic versioning , changes are documented in the github CHANGELOG.md file. Support \u00b6 Please fill any issues on the offical tracker . Contributions \u00b6 If you like to contribute, see the contribution guidelines . All P/R are warmly welcomed. Credits \u00b6 This code is principally developed and maintained by S\u00e9bastien Vanvelthem . Special thanks to all of these awesome contributors This project is based on the Java.inc work made by the PHPJavaBridge developers .","title":"Standards & quality"},{"location":"notes_implementation/#implementation-notes","text":"","title":"Implementation notes"},{"location":"notes_implementation/#status","text":"Client API can be considered stable.","title":"Status"},{"location":"notes_implementation/#quality","text":"At time of writing this document (Feb 17), version 1.0.0 passes 83 unit tests with 762 assertions for a coverage of 60%. Note The low degree of coverage is mainly due to a lot of obsolete code in the pjb driver code that is still to be removed.","title":"Quality"},{"location":"notes_implementation/#code-standards","text":"PSR 4 Autoloader PSR 3 Logger interface PSR 2 Coding Style Guide PSR 1 Coding Standards","title":"Code standards"},{"location":"notes_implementation/#changelog","text":"This project adheres to semantic versioning , changes are documented in the github CHANGELOG.md file.","title":"Changelog"},{"location":"notes_implementation/#support","text":"Please fill any issues on the offical tracker .","title":"Support"},{"location":"notes_implementation/#contributions","text":"If you like to contribute, see the contribution guidelines . All P/R are warmly welcomed.","title":"Contributions"},{"location":"notes_implementation/#credits","text":"This code is principally developed and maintained by S\u00e9bastien Vanvelthem . Special thanks to all of these awesome contributors This project is based on the Java.inc work made by the PHPJavaBridge developers .","title":"Credits"},{"location":"notes_legacy/","text":"Legacy notes \u00b6 Introduction \u00b6 The current soluble-japha Pjb62Driver driver is based on the original PHP/Java bridge Java.inc implementation and have been heavily refactored. See the differences below: Tip If you have existing code relying on previous implementations and don't want to refactor, see the compatibility layer section. Refactorings \u00b6 The original Java.inc client has been completely refactored to fit more modern trends in PHP practices (2016). New API (not backward compatible) All global functions have been removed ( java_* ) in favour of a more object oriented approach. By doing so, the new API breaks compatibility with existing code if you have code written against the Java.inc original client), but offers the possibility to rely on different driver implementations without breaking your code. PHP version and ecosystem PHP7, HHVM ready (PHP 5.5+ supported). Installable with composer Compliant with latests standards: PSR-2, PSR-3, PSR-4 Enhancements Namespaces introduced everywhere. Removed global namespace pollution (java_* functions) Removed global variables, functions and unscoped statics. No more get_last_exception... (All exceptions are thrown with reference to context) Autoloading performance (no more one big class, psr4 autoloader is used, less memory) Removed long time deprecated features in Java.inc By design, no more allow_url_fopen needed. Fixes All notices, warnings have been removed Some minor bugs found thanks to the unit tests suite Quality All code is tested (phpunit, travis), analyzed (scrunitizer) to prevent regressions. Compatibility layer \u00b6 Backward compatibility with the Java.inc client can be done through the soluble-japha-pjb62-compat lib: Installation \u00b6 Simply add the soluble/japha compatibility layer to your composer dependencies : $ composer require \"soluble/japha-pjb62-compat\" and check the [official repo] for doc and current status.","title":"Legacy version"},{"location":"notes_legacy/#legacy-notes","text":"","title":"Legacy notes"},{"location":"notes_legacy/#introduction","text":"The current soluble-japha Pjb62Driver driver is based on the original PHP/Java bridge Java.inc implementation and have been heavily refactored. See the differences below: Tip If you have existing code relying on previous implementations and don't want to refactor, see the compatibility layer section.","title":"Introduction"},{"location":"notes_legacy/#refactorings","text":"The original Java.inc client has been completely refactored to fit more modern trends in PHP practices (2016). New API (not backward compatible) All global functions have been removed ( java_* ) in favour of a more object oriented approach. By doing so, the new API breaks compatibility with existing code if you have code written against the Java.inc original client), but offers the possibility to rely on different driver implementations without breaking your code. PHP version and ecosystem PHP7, HHVM ready (PHP 5.5+ supported). Installable with composer Compliant with latests standards: PSR-2, PSR-3, PSR-4 Enhancements Namespaces introduced everywhere. Removed global namespace pollution (java_* functions) Removed global variables, functions and unscoped statics. No more get_last_exception... (All exceptions are thrown with reference to context) Autoloading performance (no more one big class, psr4 autoloader is used, less memory) Removed long time deprecated features in Java.inc By design, no more allow_url_fopen needed. Fixes All notices, warnings have been removed Some minor bugs found thanks to the unit tests suite Quality All code is tested (phpunit, travis), analyzed (scrunitizer) to prevent regressions.","title":"Refactorings"},{"location":"notes_legacy/#compatibility-layer","text":"Backward compatibility with the Java.inc client can be done through the soluble-japha-pjb62-compat lib:","title":"Compatibility layer"},{"location":"notes_legacy/#installation","text":"Simply add the soluble/japha compatibility layer to your composer dependencies : $ composer require \"soluble/japha-pjb62-compat\" and check the [official repo] for doc and current status.","title":"Installation"},{"location":"notes_limitations/","text":"Limitations \u00b6 Code auto-completion \u00b6 Code auto-completion in IDE (Netbeans, Eclipse, Idea, Atom...) is not supported. In other words, you cannot auto-complete methods on a remote Java object. The general recommendation for now, is to at use the special notation Java('<java fqdn>') as part of the parametere message in javadoc. See the example below: <?php declare ( strict_types = 1 ); use Soluble\\Japha\\Interfaces\\JavaObject ; class ExampleJavaDoc { /** * @var JavaObject Java('java.util.HashMap') the hashmap */ protected $map ; /** * @param JavaObject $map Java('java.util.HashMap') the hashmap */ public function __construct ( JavaObject $map ) { $this -> map = $map ; } /** * @return JavaObject Java('java.util.HashMap') */ public function getMap () : JavaObject { return $this -> map ; } /** * @throws \\Exception * @return int */ public function getMapSize () : int { // This method cannot be autocompleted return $this -> map -> size (); } } Extending Java class \u00b6 It is not possible to extend a Java class from a PHP one. Alternatively you can implement composition when needed <?php declare ( strict_types = 1 ) namespace My\\Helpers ; use Soluble\\Japha\\Bridge\\Adapter ; use Soluble\\Japha\\Interfaces\\JavaObject ; class TimeZone { /** * @param JavaObject Java(java.util.TimeZone) */ protected $timezone ; /** * @param Adapter $adapter bridge adapter */ public function __construct ( Adapter $adapter ) { $this -> timezone = $adapter -> java ( 'java.util.TimeZone' ); } /** * Return default JVM/Java TimeZone. * @return JavaObject Java('java.util.TimeZone') */ public function getDefault () : JavaObject { return $this -> timezone -> getDefault (); } } Lambdas \u00b6 Closure and lambdas support is under considerations","title":"Limitations"},{"location":"notes_limitations/#limitations","text":"","title":"Limitations"},{"location":"notes_limitations/#code-auto-completion","text":"Code auto-completion in IDE (Netbeans, Eclipse, Idea, Atom...) is not supported. In other words, you cannot auto-complete methods on a remote Java object. The general recommendation for now, is to at use the special notation Java('<java fqdn>') as part of the parametere message in javadoc. See the example below: <?php declare ( strict_types = 1 ); use Soluble\\Japha\\Interfaces\\JavaObject ; class ExampleJavaDoc { /** * @var JavaObject Java('java.util.HashMap') the hashmap */ protected $map ; /** * @param JavaObject $map Java('java.util.HashMap') the hashmap */ public function __construct ( JavaObject $map ) { $this -> map = $map ; } /** * @return JavaObject Java('java.util.HashMap') */ public function getMap () : JavaObject { return $this -> map ; } /** * @throws \\Exception * @return int */ public function getMapSize () : int { // This method cannot be autocompleted return $this -> map -> size (); } }","title":"Code auto-completion"},{"location":"notes_limitations/#extending-java-class","text":"It is not possible to extend a Java class from a PHP one. Alternatively you can implement composition when needed <?php declare ( strict_types = 1 ) namespace My\\Helpers ; use Soluble\\Japha\\Bridge\\Adapter ; use Soluble\\Japha\\Interfaces\\JavaObject ; class TimeZone { /** * @param JavaObject Java(java.util.TimeZone) */ protected $timezone ; /** * @param Adapter $adapter bridge adapter */ public function __construct ( Adapter $adapter ) { $this -> timezone = $adapter -> java ( 'java.util.TimeZone' ); } /** * Return default JVM/Java TimeZone. * @return JavaObject Java('java.util.TimeZone') */ public function getDefault () : JavaObject { return $this -> timezone -> getDefault (); } }","title":"Extending Java class"},{"location":"notes_limitations/#lambdas","text":"Closure and lambdas support is under considerations","title":"Lambdas"},{"location":"pjb62_compatibility/","text":"PHP/Java bridge legacy compatibility \u00b6 Introduction \u00b6 Historically the PHP/Java bridge client implementation didn't support namespaces. If you have existing code relying on previous implementations and don't want to refactor, you can install a compatibility layer . Installation \u00b6 Simply add the soluble/japha compatibility layer to your composer dependencies : $ composer require \"soluble/japha-pjb62-compat\" Documentation \u00b6 See the official repo .","title":"PHP/Java bridge legacy compatibility"},{"location":"pjb62_compatibility/#phpjava-bridge-legacy-compatibility","text":"","title":"PHP/Java bridge legacy compatibility"},{"location":"pjb62_compatibility/#introduction","text":"Historically the PHP/Java bridge client implementation didn't support namespaces. If you have existing code relying on previous implementations and don't want to refactor, you can install a compatibility layer .","title":"Introduction"},{"location":"pjb62_compatibility/#installation","text":"Simply add the soluble/japha compatibility layer to your composer dependencies : $ composer require \"soluble/japha-pjb62-compat\"","title":"Installation"},{"location":"pjb62_compatibility/#documentation","text":"See the official repo .","title":"Documentation"},{"location":"use_cases/","text":"Some use cases \u00b6 https://github.com/akullpp/awesome-java \u00b6 Document Processing - Apache POI http://poi.apache.org/ - Document4j http://documents4j.com/ - JOpenDocument http://www.jopendocument.org/ Reporting - Jasper Reports http://community.jaspersoft.com/project/jasperreports-library - Birt - Dynamic Reports http://dynamicreports.org/ PDF: PDFBox http://pdfbox.apache.org/ JDBC - Access -> http://ucanaccess.sourceforge.net/site.html Mail - Exchange connector http://www.moonrug.com/ Unsorted - Java OCR","title":"Some use cases"},{"location":"use_cases/#some-use-cases","text":"https://github.com/akullpp/awesome-java","title":"Some use cases"},{"location":"use_cases/#_1","text":"Document Processing - Apache POI http://poi.apache.org/ - Document4j http://documents4j.com/ - JOpenDocument http://www.jopendocument.org/ Reporting - Jasper Reports http://community.jaspersoft.com/project/jasperreports-library - Birt - Dynamic Reports http://dynamicreports.org/ PDF: PDFBox http://pdfbox.apache.org/ JDBC - Access -> http://ucanaccess.sourceforge.net/site.html Mail - Exchange connector http://www.moonrug.com/ Unsorted - Java OCR","title":""},{"location":"server/install_java/","text":"Java installation \u00b6 For Linux derivatives \u00b6 Ubuntu \u00b6 Tip On Ubuntu, you can either choose the default OpenJdk or install the official Oracle JDK (through an additional software repository). Note that Oracle change its business policy recently (jdk not free anymore) OpenJdk \u00b6 OpenJdk versions 7, 8 and 11 can be installed through the official repos starting Ubuntu trusty and are maintained by Canonical. $ sudo apt-get install openjdk-11-jdk To set the system wide default jdk, simply launch the update-alternatives command : $ sudo update-alternatives --config java Oracle JDK \u00b6 Deprecated install notes The Oracle JDK is available through an external ppa repository. $ sudo apt-get install python-software-properties $ sudo add-apt-repository ppa:webupd8team/java $ sudo apt-get update $ sudo apt-get install oracle-java8-installer To set the system wide default jdk, simply install the oracle-javaX-set-default package, where X stands for the version you need. $ sudo apt-get install oracle-java8-set-default Redhat / Centos \u00b6 On Redhat systems, OpenJdk \u00b6 OpenJdk versions 6 and 7 can be installed through the official redhat repos $ yum install java-1.7.0-openjdk-devel See also this question . Oracle JDK \u00b6 For Redhat subscribed users, you can refer to this solution . Windows and Mac OS/X \u00b6 Platform binaries are available at the official oracle page","title":"Java install"},{"location":"server/install_java/#java-installation","text":"","title":"Java installation"},{"location":"server/install_java/#for-linux-derivatives","text":"","title":"For Linux derivatives"},{"location":"server/install_java/#ubuntu","text":"Tip On Ubuntu, you can either choose the default OpenJdk or install the official Oracle JDK (through an additional software repository). Note that Oracle change its business policy recently (jdk not free anymore)","title":"Ubuntu"},{"location":"server/install_java/#openjdk","text":"OpenJdk versions 7, 8 and 11 can be installed through the official repos starting Ubuntu trusty and are maintained by Canonical. $ sudo apt-get install openjdk-11-jdk To set the system wide default jdk, simply launch the update-alternatives command : $ sudo update-alternatives --config java","title":"OpenJdk"},{"location":"server/install_java/#oracle-jdk","text":"Deprecated install notes The Oracle JDK is available through an external ppa repository. $ sudo apt-get install python-software-properties $ sudo add-apt-repository ppa:webupd8team/java $ sudo apt-get update $ sudo apt-get install oracle-java8-installer To set the system wide default jdk, simply install the oracle-javaX-set-default package, where X stands for the version you need. $ sudo apt-get install oracle-java8-set-default","title":"Oracle JDK"},{"location":"server/install_java/#redhat-centos","text":"On Redhat systems,","title":"Redhat / Centos"},{"location":"server/install_java/#openjdk_1","text":"OpenJdk versions 6 and 7 can be installed through the official redhat repos $ yum install java-1.7.0-openjdk-devel See also this question .","title":"OpenJdk"},{"location":"server/install_java/#oracle-jdk_1","text":"For Redhat subscribed users, you can refer to this solution .","title":"Oracle JDK"},{"location":"server/install_java/#windows-and-mac-osx","text":"Platform binaries are available at the official oracle page","title":"Windows and Mac OS/X"},{"location":"server/install_tomcat/","text":"Tomcat setup \u00b6 Info This document provides some recipes and examples for installing Tomcat on your system. Refer to the official Tomcat homepage for updated documentation and installation instructions . Note that Tomcat requires Java prior to installation. Installation \u00b6 Ubuntu/Debian \u00b6 On Ubuntu/Debian Tomcat can be installed easily from the command line. Both tomcat7 and tomcat8 versions are available, feel free to replace 8 by 7 in the following examples: $ sudo apt-get install tomcat8 tomcat8-admin The tomcat server listens by default on port 8080 and its webapps folder is located in /var/lib/tomcat8/webapps . Apple OSX \u00b6 Tomcat 8 can be installed with homebrew, open a terminal and type: $ brew install tomcat The tomcat server listens by default on port 8080 and its webapps folder is located in /usr/local/Cellar/tomcat/[version]/libexec/webapps/ . If you want to check the service, run $ brew services list Windows \u00b6 Download the tomcat windows binaries on the Tomcat download page and follow instructions. Docker (multiplatform) \u00b6 Alternatively you can pull the official tomcat image. $ docker run -it --rm tomcat:8.0 And listens by default on 8088 port. Configuration \u00b6 Ubuntu/Debian \u00b6 Admin interface (optional) \u00b6 An optional but nice move to do is to configure the Tomcat admin interface: $ sudo vi /etc/tomcat8/tomcat-users.xml Replace username and password in the section <tomcat-users> <user username= \"admin\" password= \"password\" roles= \"manager-gui,admin-gui\" /> </tomcat-users> Restart tomcat to apply changes with sudo service tomcat8 restart or sudo /etc/init.d/tomcat8 restart . Setting Oracle JDK (optional) \u00b6 On Ubuntu systems: $ sudo vi /etc/default/tomcat8 And modify JAVA_HOME , for example with latest Oracle JDK JAVA_HOME=/usr/lib/jvm/java-8-oracle Restart tomcat to apply changes with sudo service tomcat8 restart or sudo /etc/init.d/tomcat8 restart . Adding more memory \u00b6 On Ubuntu systems: $ vi /etc/default/tomcat8 Look for the Xmx default at 128m and increase JAVA_OPTS=\"-Djava.awt.headless=true -Xmx512m -XX:+UseConcMarkSweepGC\" then restart Tomcat sudo service tomcat8 restart Testing installation \u00b6 Open your browser to \"http://localhost:8080\", a page should say 'It works' The tomcat manager interface can be located at \"http://localhost:8080/manager\" Resources \u00b6 http://tomcat.apache.org/ https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-7-on-ubuntu-14-04-via-apt-get","title":"Tomcat install"},{"location":"server/install_tomcat/#tomcat-setup","text":"Info This document provides some recipes and examples for installing Tomcat on your system. Refer to the official Tomcat homepage for updated documentation and installation instructions . Note that Tomcat requires Java prior to installation.","title":"Tomcat setup"},{"location":"server/install_tomcat/#installation","text":"","title":"Installation"},{"location":"server/install_tomcat/#ubuntudebian","text":"On Ubuntu/Debian Tomcat can be installed easily from the command line. Both tomcat7 and tomcat8 versions are available, feel free to replace 8 by 7 in the following examples: $ sudo apt-get install tomcat8 tomcat8-admin The tomcat server listens by default on port 8080 and its webapps folder is located in /var/lib/tomcat8/webapps .","title":"Ubuntu/Debian"},{"location":"server/install_tomcat/#apple-osx","text":"Tomcat 8 can be installed with homebrew, open a terminal and type: $ brew install tomcat The tomcat server listens by default on port 8080 and its webapps folder is located in /usr/local/Cellar/tomcat/[version]/libexec/webapps/ . If you want to check the service, run $ brew services list","title":"Apple OSX"},{"location":"server/install_tomcat/#windows","text":"Download the tomcat windows binaries on the Tomcat download page and follow instructions.","title":"Windows"},{"location":"server/install_tomcat/#docker-multiplatform","text":"Alternatively you can pull the official tomcat image. $ docker run -it --rm tomcat:8.0 And listens by default on 8088 port.","title":"Docker (multiplatform)"},{"location":"server/install_tomcat/#configuration","text":"","title":"Configuration"},{"location":"server/install_tomcat/#ubuntudebian_1","text":"","title":"Ubuntu/Debian"},{"location":"server/install_tomcat/#admin-interface-optional","text":"An optional but nice move to do is to configure the Tomcat admin interface: $ sudo vi /etc/tomcat8/tomcat-users.xml Replace username and password in the section <tomcat-users> <user username= \"admin\" password= \"password\" roles= \"manager-gui,admin-gui\" /> </tomcat-users> Restart tomcat to apply changes with sudo service tomcat8 restart or sudo /etc/init.d/tomcat8 restart .","title":"Admin interface (optional)"},{"location":"server/install_tomcat/#setting-oracle-jdk-optional","text":"On Ubuntu systems: $ sudo vi /etc/default/tomcat8 And modify JAVA_HOME , for example with latest Oracle JDK JAVA_HOME=/usr/lib/jvm/java-8-oracle Restart tomcat to apply changes with sudo service tomcat8 restart or sudo /etc/init.d/tomcat8 restart .","title":"Setting Oracle JDK (optional)"},{"location":"server/install_tomcat/#adding-more-memory","text":"On Ubuntu systems: $ vi /etc/default/tomcat8 Look for the Xmx default at 128m and increase JAVA_OPTS=\"-Djava.awt.headless=true -Xmx512m -XX:+UseConcMarkSweepGC\" then restart Tomcat sudo service tomcat8 restart","title":"Adding more memory"},{"location":"server/install_tomcat/#testing-installation","text":"Open your browser to \"http://localhost:8080\", a page should say 'It works' The tomcat manager interface can be located at \"http://localhost:8080/manager\"","title":"Testing installation"},{"location":"server/install_tomcat/#resources","text":"http://tomcat.apache.org/ https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-7-on-ubuntu-14-04-via-apt-get","title":"Resources"}]}